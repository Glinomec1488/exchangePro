#!/usr/bin/python
# -*- coding: utf-8 -*-
import os
import random
import sys
import asyncio
import logging
import time
import requests
from aiogram.types import (
    CallbackQuery,
    FSInputFile,
    InlineKeyboardButton,
    InlineQuery,
    InputTextMessageContent,
    InlineQueryResultArticle,
    InputMediaPhoto,
    InlineKeyboardMarkup,
    Message,
)
from aiogram import Bot, Dispatcher, types, Router
from aiogram.dispatcher.fsm.context import FSMContext
from keyboards.default import keyboards as default
from keyboards.inline import keyboards as inline
from aiogram.dispatcher.fsm.storage.memory import MemoryStorage
import data.config as config
from utils.db_api import requests as db_api
from states.user import states
from PIL import Image, ImageDraw, ImageFont
from datetime import datetime
from aiogram import Router, F, Bot, Dispatcher


db_api.createDb()

form_router = Router()
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
basicPriv = "basic"
superadminPriv = "superadmin"
managerPriv = "manager"


async def main(bot: Bot) -> None:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    dp.include_router(form_router)
    bot = Bot(f"{config.BotToken}", parse_mode="HTML")
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        await dp.start_polling(bot, drop_pending_updates=True)
    except:
        logging.info("Polling task Canceled")


@form_router.message(state=states.Answer.text)
async def rf(message: types.Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    user_id = data["userId"]
    text = message.text
    dt = datetime.now()
    ts = int(datetime.timestamp(dt) * 1000)
    db_api.addMsg(user_id, text, ts)
    await bot.send_message(message.chat.id, "–£—à–ª–æ")
    await state.clear()


@form_router.message(state=states.addProfit.user_id)
async def rf(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.text.split(":")[0]
    amount = message.text.split(":")[1]
    intId = int(user_id)
    floatAmout = float(amount)
    usr = db_api.checkUser(intId)
    if not usr:
        await bot.send_message(
            message.chat.id, f"–í–æ—Ä–∫–µ—Ä–∞ <code>{usr}</code> –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
        await bot.send_message(
            message.chat.id, text=f"<b>–ü—Ä–∏–≤–µ—Ç ü©∏</b>", reply_markup=inline.apanel()
        )
        await state.clear()
    else:
        db_api.addProfit(intId, floatAmout)
        await bot.send_message(intId, f"{usr}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–æ—Ñ–∏—Ç–æ–º!\n{amount}$")
        await bot.send_message(
            message.chat.id, text=f"<b>–ü—Ä–∏–≤–µ—Ç ü©∏</b>", reply_markup=inline.apanel()
        )
        await state.clear()


@form_router.message(state=states.changeReq.wallet)
async def rf(message: types.Message, bot: Bot, state: FSMContext):
    data = await state.get_data()
    coin = data["value"]
    wallet = message.text
    db_api.changeStatus(coin, wallet)
    await bot.send_message(
        message.chat.id,
        f"–†–µ–∫–≤–∏–∑–∏—Ç <code>{coin}</code> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ :\n<code>{wallet}</code>",
    )
    await bot.send_message(
        message.chat.id, text=f"<b>–ü—Ä–∏–≤–µ—Ç ü©∏</b>", reply_markup=inline.apanel()
    )
    await state.clear()


@form_router.message(state=states.RemoveUserForm.user_id)
async def rmus(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.text
    usr = db_api.checkUser(user_id)
    if not usr:
        await bot.send_message(message.chat.id, text="–¢–∞–∫–∏—Ö –î—ç–±–∏–ª–æ–≤ —É –Ω–∞—Å –Ω–µ—Ç")
        await state.clear()
    else:
        inline_keyboard = {
            "inline_keyboard": [
                [
                    {
                        "text": "–î–∞",
                        "callback_data": f"banuser_{user_id}",
                    }
                ],
                [
                    {
                        "text": "–ù–µ—Ç",
                        "callback_data": f"returnToPanel",
                    }
                ],
            ]
        }
        db_api.removeUser(user_id)
        await bot.send_message(
            message.chat.id,
            text=f"{user_id} - –õ–ò–ö–í–ò–î–ò–†–û–í–ê–ù, –∂–µ–ª–∞–µ—Ç–µ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –≤ —Å–ø–∞–º-–ª–∏—Å—Ç?",
            reply_markup=inline_keyboard,
        )
        await state.clear()


@form_router.message(state=states.msgEveryone.message)
async def sendMessage(message: types.Message, bot: Bot, state: FSMContext):
    allIds = db_api.getAllUsers()
    if message.text:
        message = message.text
        for i in allIds:
            await bot.send_message(i, text=f"""{message}""")
    elif message.photo:
        message = message.photo[-1].file_id
        for i in allIds:
            await bot.send_photo(i, photo=message)
    elif message.video:
        message = message.video.file_id
        for i in allIds:
            await bot.send_video(i, video=message)
    await state.clear()


@form_router.message(commands={"start"})
async def start_cmd(message: types.Message, bot: Bot, state: FSMContext):
    banned = db_api.checkIfBanned(message.from_user.id)
    if not banned:
        usr = db_api.checkUser(message.from_user.id)
        if not usr:
            if message.from_user.id in config.admins:
                pas = ""

                dt = datetime.now()
                ts = datetime.timestamp(dt)
                for x in range(8):
                    pas = pas + random.choice(
                        list(
                            "1234567890abcdefghigklmnopqrstuvyxwzABCDEFGHIGKLMNOPQRSTUVYXWZ"
                        )
                    )
                db_api.registerUser(
                    message.from_user.id,
                    f"@{message.from_user.username}",
                    pas,
                    ts,
                    superadminPriv,
                )
                await bot.send_message(message.chat.id, text=f"ü¶£üí™")
            else:
                await bot.send_message(
                    message.chat.id,
                    text=f"""<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å , {message.from_user.first_name}, –æ—Ç–ø–∏—à–∏ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω—É. {config.coderUS}</b>""",
                )
                inline_keyboard = {
                    "inline_keyboard": [
                        [
                            {
                                "text": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É",
                                "callback_data": f"register;{message.chat.id}.{message.from_user.username}",
                            }
                        ],
                        [
                            {
                                "text": "–í —Å–ø–∞–º",
                                "callback_data": f"banuser_{message.chat.id}",
                            }
                        ],
                    ]
                }
                for i in config.admins:
                    await bot.send_message(
                        i,
                        text=f"""{message.from_user.first_name}, ({message.from_user.id}) –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è""",
                        reply_markup=inline_keyboard,
                    )
        else:
            await bot.send_message(
                message.chat.id,
                text=f"""<b>–°–∞–ø</b>""",
                reply_markup=default.main_keyboard(message.from_user.id),
            )
    else:
        pass


@form_router.message(content_types=["text"])
async def get_text(message: types.Message, bot: Bot) -> None:
    usr = db_api.checkUser(message.from_user.id)
    if usr:
        if message.text == "üíé –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
            img = Image.open("./example.jpg")
            d1 = ImageDraw.Draw(img)
            fnt = ImageFont.truetype("Roboto-Bold.ttf", 50)
            fnt1 = ImageFont.truetype("Roboto-Bold.ttf", 40)
            fnt2 = ImageFont.truetype("Roboto-Regular.ttf", 18)
            fnt3 = ImageFont.truetype("Roboto-Regular.ttf", 21)
            fnt4 = ImageFont.truetype("Roboto-Bold.ttf", 30)
            fnt5 = ImageFont.truetype("Roboto-Bold.ttf", 30)
            count = db_api.getProfitsCount(message.from_user.id)
            amount = db_api.getProfitsAmount(message.from_user.id)
            dt = datetime.now()
            ts = datetime.timestamp(dt)
            days = int((ts - db_api.getRegistration(message.from_user.id)) / 86400)
            d1.text((102, 50), f"–í–æ—Ä–∫–µ—Ä:", font=fnt, fill=("#000000"))
            d1.text(
                (102, 110), f"{message.from_user.username}", font=fnt1, fill=("#000000")
            )
            d1.text(
                (102, 170), f"{days} –¥–Ω–µ–π –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ", font=fnt2, fill=("#000000")
            )
            d1.text((102, 260), f"{count} –ø—Ä–æ—Ñ–∏—Ç–æ–≤", font=fnt3, fill=("#000000"))
            d1.text((102, 290), f"–ù–∞ —Å—É–º–º—É {amount} $", font=fnt4, fill=("#000000"))
            d1.text((102, 390), f"@extasy_team_bot", font=fnt5, fill=("#000000"))
            img.save("abc.jpeg")
            code = db_api.getRefCode(message.from_user.id)
            await bot.send_photo(
                message.chat.id,
                caption=f"""<b>üíé –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å [{message.from_user.id}]</b>

    <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{code}</code>

    <b>–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç:</b> <code>{amount}$</code>
    <b>–ö–æ–ª-–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:</b> <code>{count}</code>

    <b>–í –∫–æ–º–∞–Ω–¥–µ:</b> {days} –¥–Ω–µ–π""",
                photo=FSInputFile("abc.jpeg"),
            )
        elif message.text == "üîó –ú–æ–∏ –¥–æ–º–µ–Ω—ã":
            await bot.send_message(message.chat.id, text="<b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>")
        elif message.text == "üìñ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å?":
            code = db_api.getCode(message.from_user.id)
            await bot.send_message(
                message.chat.id,
                text=f"""<b>üìñ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ</b>

    <b>–°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∏:</b>
    ‚Äî https://bestexc.pro

    <b>–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{code}</code>

    <b>–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
    ‚Äî https://bestexc.pro?ref={code}


    <b>–°–≤—è–∑–∫–∏ –¥–ª—è –º–∞–º–æ–Ω—Ç–æ–≤:</b>
    <b>XMR/USDT</b> - https://telegra.ph/Novaya-arbitrazhnaya-svyazka-06-19
    <b>LTC/USDT</b> - https://telegra.ph/Novaya-arbitrazhnaya-svyazka-06-19-2
    <b>TRX/USDT</b> - https://telegra.ph/Novaya-arbitrazhnaya-svyazka-06-19-3

    <i>‚ö†Ô∏è –ú–∞–º–æ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ</i>""",
                reply_markup=inline.faqButtons(),
                disable_web_page_preview=True,
            )
        elif message.text == "üë©üèª‚Äçüíª –û –ø—Ä–æ–µ–∫—Ç–µ":
            await bot.send_message(
                message.chat.id,
                text=f"""üë©üèª‚Äçüíª –û –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ

    –í–∞—à–∏–Ω–≥—Ç–æ–Ω —Ç–æ–∂–µ –Ω–µ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –ø–æ—Å—Ç—Ä–æ–µ–Ω

    üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
    –¢—Å / –∫–æ–¥–µ—Ä: {config.coderUS}

    üí∏ –í—ã–ø–ª–∞—Ç—ã –Ω–∞ CryptoBot –∏–ª–∏ –≤ BTC

    ‚ö†Ô∏è """,
            )
        elif message.text == "üç∑ –ê–¥–º–∏–Ω –ú–µ–Ω—é":
            print(db_api.checkPriv(message.from_user.id))
            if db_api.checkPriv(message.from_user.id) == superadminPriv:
                await bot.send_message(
                    message.chat.id,
                    text=f"<b>–ü—Ä–∏–≤–µ—Ç ü©∏</b>",
                    reply_markup=inline.apanel(),
                )
            else:
                pass
        elif message.text == "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è":
            if db_api.checkPriv(message.from_user.id) == managerPriv or superadminPriv:
                await bot.send_message(
                    message.chat.id,
                    text=f"<b>–ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>",
                    reply_markup=inline.managementPanel(),
                )
            else:
                pass
        elif message.text == "üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await bot.send_message(
                message.chat.id,
                text=f"<b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>",
            )
        else:
            pass
    else:
        pass


@form_router.callback_query(
    lambda c: c.data,
)
async def ans(call: CallbackQuery, bot: Bot, state: FSMContext) -> None:
    if "uans" in call.data:
        id = call.data.split("_")[1]
        await state.update_data(userId=id)
        await bot.send_message(call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        await state.set_state(states.Answer.text)
    elif "rmchat" in call.data:
        id = call.data.split("_")[1]
        await state.update_data(userId=id)
        db_api.clMsg(id)
        await bot.send_message(call.message.chat.id, text=f"–ß–∞—Ç —É {id} –æ—á–∏—â–µ–Ω")
    elif "rmoldchats" in call.data:
        db_api.delete_old_messages()
        await bot.edit_message_text(
            f"—Å—Ç–∞—Ä—ã–µ —á–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.managementPanelBack(),
        )
    elif "register" in call.data:
        filterRegPrefiix = call.data.split(";")[1]
        id = filterRegPrefiix.split(".")[0]
        name = filterRegPrefiix.split(".")[1]
        usr = db_api.checkUser(id)
        if not usr:
            pas = ""
            dt = datetime.now()
            ts = datetime.timestamp(dt)
            for x in range(8):
                pas = pas + random.choice(
                    list(
                        "1234567890abcdefghigklmnopqrstuvyxwzABCDEFGHIGKLMNOPQRSTUVYXWZ"
                    )
                )
            db_api.registerUser(id, f"@{name}", pas, ts, basicPriv)
            await bot.send_message(
                call.message.chat.id,
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–±–∏—Ç—å –µ–≥–æ –ª–æ–≥–∏ –≤ —á–µ—Ä–Ω—É—é",
            )
            await bot.send_message(
                id, "–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –ù–∞–ø–∏—à–∏—Ç–µ /start"
            )
        else:
            await bot.send_message(call.message.chat.id, "–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω")
    elif call.data == "rmuser":
        await bot.edit_message_text(
            f"<b>–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.adminBack(),
        )
        await state.set_state(states.RemoveUserForm.user_id)
    elif call.data == "msgeveryone":
        await bot.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–∏–Ω—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.managementPanelBack(),
        )
        await state.set_state(states.msgEveryone.message)
    elif call.data == "addprofit":
        await bot.edit_message_text(
            f"–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–∏—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ telegramID:—Å—É–º–º–∞$",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.adminBack(),
        )
        await state.set_state(states.addProfit.user_id)
    elif call.data == "changereq":
        await bot.edit_message_text(
            text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–∏–Ω:</b>",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.change_coins(),
        )
    elif "confirm_" in call.data:
        data = call.data.split("_")[1]
        db_api.changeStatusToReturned(data)
        payload = {"transID": data}
        response = requests.post(f"{config.serverUrl}/send-message", json=payload)
        if response.status_code == 200:
            print("200")
        else:
            print("error", response)
    elif "custErr_" in call.data:
        data = call.data.split("_")[1]
        db_api.changeStatusToErr(data)
        payload = {"transID": data}
        response = requests.post(f"{config.serverUrl}/send-message", json=payload)
        if response.status_code == 200:
            print("200")
        else:
            print("error", response)
    elif call.data == "lsusers":
        data = db_api.listUserDb()
        await bot.edit_message_text(
            text=f"–õ–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{data} ",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.adminBack(),
        )
    elif "ch_" in call.data:
        await state.update_data(value=call.data.split("_")[1])
        await bot.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.adminBack(),
        )
        await state.set_state(states.changeReq.wallet)
    elif "banuser" in call.data:
        user_id = call.data.split("_")[1]
        banned = db_api.checkIfBanned(user_id)
        if not banned:
            db_api.ban(user_id)
            await bot.edit_message_text(  # $
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Å–ø–∞–º-–ª–∏—Å—Ç",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=inline.adminBack(),
            )
        else:
            await bot.send_message(
                call.message.chat.id,
                f"{user_id} - –£–∂–µ –≤ –±–∞–Ω–µ",
            )
    elif "returnToPanel" in call.data:
        await state.clear()
        await bot.edit_message_text(
            f"<b>–ü—Ä–∏–≤–µ—Ç ü©∏</b>",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.apanel(),
        )
    elif "returnToManagementPanel" in call.data:
        await state.clear()
        await bot.edit_message_text(
            f"<b>–ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.managementPanel(),
        )
    elif "hideChat_" in call.data:
        data = call.data.split("_")[1]
        db_api.chatBan(data)
        payload = {"id": data}
        response = requests.post(f"{config.serverUrl}/hideChat", json=payload)
    elif "promote_" in call.data:
        userId = call.data.split("_")[1]
        await bot.edit_message_text(  # $
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –±—ã–ª –ø–æ–≤—ã—à–µ–Ω –¥–æ ",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.adminBack(),
        )
    elif "show_banlist" in call.data:
        banlist = db_api.show_banlist()
        await bot.edit_message_text(
            text=f"–õ–∏—Å—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{banlist} ",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=inline.adminBack(),
        )
        # if response.status_code == 200:
        #    print("200")
        # else:
        #    print("error", response)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main(bot=Bot))
