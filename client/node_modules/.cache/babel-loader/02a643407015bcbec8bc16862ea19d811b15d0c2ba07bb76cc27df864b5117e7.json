{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { serveUrl } from \"../../config\";\nconst useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Hello my friend!\",\n    createdAt: \"2021-07-21 12:09:12\",\n    user: {\n      id: 1\n    }\n  }, {\n    id: 2,\n    text: \"Hello!\",\n    createdAt: \"2021-07-21 14:09:12\",\n    user: {\n      id: 2\n    }\n  }]);\n  const getHistoy = async () => {\n    const userId = localStorage.getItem(\"userId\");\n    const history = await fetch(`${serveUrl}/msgHistory/${userId}`).then(res => res.json());\n    if (history.length > 0) {\n      setMessages(history.map(elem => ({\n        id: elem.id,\n        text: elem.text,\n        createdAt: elem.timestamp,\n        user: {\n          id: elem.user === \"true\" ? 2 : 1\n        }\n      })));\n    }\n  };\n  const sendMessage = async message => {\n    const messageTextEncoded = encodeURIComponent(message.text);\n    const userId = localStorage.getItem(\"userId\");\n    const timestamp = new Date().getTime();\n    await fetch(`${serveUrl}/msgSave/${messageTextEncoded}/${userId}/${timestamp}/true`, {\n      method: \"POST\"\n    });\n    getHistoy();\n  };\n  useEffect(() => {\n    const timer = setInterval(() => {\n      getHistoy();\n    }, 5000);\n    return () => clearInterval(timer);\n  });\n  return {\n    messages,\n    sendMessage\n  };\n};\n_s(useChat, \"UbRpA/LO8r23IL9OiAKRDJUEFK0=\");\nexport default useChat;","map":{"version":3,"names":["useState","useEffect","serveUrl","useChat","messages","setMessages","id","text","createdAt","user","getHistoy","userId","localStorage","getItem","history","fetch","then","res","json","length","map","elem","timestamp","sendMessage","message","messageTextEncoded","encodeURIComponent","Date","getTime","method","timer","setInterval","clearInterval"],"sources":["C:/Users/1/Downloads/fakeex/client/src/components/chat/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { Message } from \"react-simple-chat\";\r\nimport { serveUrl } from \"../../config\";\r\n\r\nconst useChat = () => {\r\n  const [messages, setMessages] = useState<Message[]>([\r\n    {\r\n      id: 1,\r\n      text: \"Hello my friend!\",\r\n      createdAt: \"2021-07-21 12:09:12\",\r\n      user: {\r\n        id: 1,\r\n      },\r\n    },\r\n    {\r\n      id: 2,\r\n      text: \"Hello!\",\r\n      createdAt: \"2021-07-21 14:09:12\",\r\n      user: {\r\n        id: 2,\r\n      },\r\n    },\r\n  ]);\r\n\r\n  const getHistoy = async () => {\r\n    const userId = localStorage.getItem(\"userId\");\r\n\r\n    const history = await fetch(`${serveUrl}/msgHistory/${userId}`).then(\r\n      (res) => res.json()\r\n    );\r\n\r\n    if (history.length > 0) {\r\n      setMessages(\r\n        history.map((elem: any) => ({\r\n          id: elem.id,\r\n          text: elem.text,\r\n          createdAt: elem.timestamp,\r\n          user: {\r\n            id: elem.user === \"true\" ? 2 : 1,\r\n          },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (message: Message) => {\r\n    const messageTextEncoded = encodeURIComponent(message.text);\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const timestamp = new Date().getTime();\r\n    await fetch(\r\n      `${serveUrl}/msgSave/${messageTextEncoded}/${userId}/${timestamp}/true`,\r\n      {\r\n        method: \"POST\",\r\n      }\r\n    );\r\n\r\n    getHistoy();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      getHistoy();\r\n    }, 5000);\r\n\r\n    return () => clearInterval(timer);\r\n  });\r\n\r\n  return {\r\n    messages,\r\n    sendMessage,\r\n  };\r\n};\r\n\r\nexport default useChat;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAqB,OAAO;AAExD,SAASC,QAAQ,QAAQ,cAAc;AAEvC,MAAMC,OAAO,GAAG,MAAM;EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAY,CAClD;IACEM,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,kBAAkB;IACxBC,SAAS,EAAE,qBAAqB;IAChCC,IAAI,EAAE;MACJH,EAAE,EAAE;IACN;EACF,CAAC,EACD;IACEA,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAE,qBAAqB;IAChCC,IAAI,EAAE;MACJH,EAAE,EAAE;IACN;EACF,CAAC,CACF,CAAC;EAEF,MAAMI,SAAS,GAAG,YAAY;IAC5B,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAE7C,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,GAAEb,QAAS,eAAcS,MAAO,EAAC,CAAC,CAACK,IAAI,CACjEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CACpB;IAED,IAAIJ,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;MACtBd,WAAW,CACTS,OAAO,CAACM,GAAG,CAAEC,IAAS,KAAM;QAC1Bf,EAAE,EAAEe,IAAI,CAACf,EAAE;QACXC,IAAI,EAAEc,IAAI,CAACd,IAAI;QACfC,SAAS,EAAEa,IAAI,CAACC,SAAS;QACzBb,IAAI,EAAE;UACJH,EAAE,EAAEe,IAAI,CAACZ,IAAI,KAAK,MAAM,GAAG,CAAC,GAAG;QACjC;MACF,CAAC,CAAC,CAAC,CACJ;IACH;EACF,CAAC;EAED,MAAMc,WAAW,GAAG,MAAOC,OAAgB,IAAK;IAC9C,MAAMC,kBAAkB,GAAGC,kBAAkB,CAACF,OAAO,CAACjB,IAAI,CAAC;IAC3D,MAAMI,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7C,MAAMS,SAAS,GAAG,IAAIK,IAAI,EAAE,CAACC,OAAO,EAAE;IACtC,MAAMb,KAAK,CACR,GAAEb,QAAS,YAAWuB,kBAAmB,IAAGd,MAAO,IAAGW,SAAU,OAAM,EACvE;MACEO,MAAM,EAAE;IACV,CAAC,CACF;IAEDnB,SAAS,EAAE;EACb,CAAC;EAEDT,SAAS,CAAC,MAAM;IACd,MAAM6B,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC9BrB,SAAS,EAAE;IACb,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMsB,aAAa,CAACF,KAAK,CAAC;EACnC,CAAC,CAAC;EAEF,OAAO;IACL1B,QAAQ;IACRmB;EACF,CAAC;AACH,CAAC;AAAC,GAnEIpB,OAAO;AAqEb,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}