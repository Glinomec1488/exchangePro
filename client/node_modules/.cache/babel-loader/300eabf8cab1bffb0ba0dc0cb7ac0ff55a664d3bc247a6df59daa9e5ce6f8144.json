{"ast":null,"code":"import _get from \"C:/Users/diarrhea/Downloads/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/diarrhea/Downloads/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"C:/Users/diarrhea/Downloads/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/diarrhea/Downloads/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/diarrhea/Downloads/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/diarrhea/Downloads/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/diarrhea/Downloads/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick } from \"./globals.node.js\";\nvar withEventListeners = typeof addEventListener === \"function\" && typeof removeEventListener === \"function\";\nvar OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n  // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n  // script, so we create one single event listener here which will forward the event to the socket instances\n  addEventListener(\"offline\", function () {\n    OFFLINE_EVENT_LISTENERS.forEach(function (listener) {\n      return listener();\n    });\n  }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nexport var SocketWithoutUpgrade = /*#__PURE__*/function (_Emitter) {\n  _inherits(SocketWithoutUpgrade, _Emitter);\n  var _super = _createSuper(SocketWithoutUpgrade);\n  /**\n   * Socket constructor.\n   *\n   * @param {String|Object} uri - uri or options\n   * @param {Object} opts - options\n   */\n  function SocketWithoutUpgrade(uri, opts) {\n    var _this;\n    _classCallCheck(this, SocketWithoutUpgrade);\n    _this = _super.call(this);\n    _this.binaryType = defaultBinaryType;\n    _this.writeBuffer = [];\n    _this._prevBufferLen = 0;\n    _this._pingInterval = -1;\n    _this._pingTimeout = -1;\n    _this._maxPayload = -1;\n    /**\n     * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n     * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n     */\n    _this._pingTimeoutTime = Infinity;\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n    if (uri) {\n      var parsedUri = parse(uri);\n      opts.hostname = parsedUri.host;\n      opts.secure = parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n      opts.port = parsedUri.port;\n      if (parsedUri.query) opts.query = parsedUri.query;\n    } else if (opts.host) {\n      opts.hostname = parse(opts.host).host;\n    }\n    installTimerFunctions(_assertThisInitialized(_this), opts);\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? \"443\" : \"80\");\n    _this.transports = [];\n    _this._transportsByName = {};\n    opts.transports.forEach(function (t) {\n      var transportName = t.prototype.name;\n      _this.transports.push(transportName);\n      _this._transportsByName[transportName] = t;\n    });\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      addTrailingSlash: true,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {},\n      closeOnBeforeunload: false\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + (_this.opts.addTrailingSlash ? \"/\" : \"\");\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = decode(_this.opts.query);\n    }\n    if (withEventListeners) {\n      if (_this.opts.closeOnBeforeunload) {\n        // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n        // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n        // closed/reloaded)\n        _this._beforeunloadEventListener = function () {\n          if (_this.transport) {\n            // silently close the transport\n            _this.transport.removeAllListeners();\n            _this.transport.close();\n          }\n        };\n        addEventListener(\"beforeunload\", _this._beforeunloadEventListener, false);\n      }\n      if (_this.hostname !== \"localhost\") {\n        _this._offlineEventListener = function () {\n          _this._onClose(\"transport close\", {\n            description: \"network connection lost\"\n          });\n        };\n        OFFLINE_EVENT_LISTENERS.push(_this._offlineEventListener);\n      }\n    }\n    if (_this.opts.withCredentials) {\n      _this._cookieJar = createCookieJar();\n    }\n    _this._open();\n    return _this;\n  }\n  /**\n   * Creates transport of the given type.\n   *\n   * @param {String} name - transport name\n   * @return {Transport}\n   * @private\n   */\n  _createClass(SocketWithoutUpgrade, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      var query = Object.assign({}, this.opts.query);\n      // append engine.io protocol identifier\n      query.EIO = protocol;\n      // transport name\n      query.transport = name;\n      // session id if we already have one\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      }, this.opts.transportOptions[name]);\n      return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n  }, {\n    key: \"_open\",\n    value: function _open() {\n      var _this2 = this;\n      if (this.transports.length === 0) {\n        // Emit error on next tick so it can be listened to\n        this.setTimeoutFn(function () {\n          _this2.emitReserved(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      }\n      var transportName = this.opts.rememberUpgrade && SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1 ? \"websocket\" : this.transports[0];\n      this.readyState = \"opening\";\n      var transport = this.createTransport(transportName);\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      var _this3 = this;\n      if (this.transport) {\n        this.transport.removeAllListeners();\n      }\n      // set up transport\n      this.transport = transport;\n      // set up transport listeners\n      transport.on(\"drain\", this._onDrain.bind(this)).on(\"packet\", this._onPacket.bind(this)).on(\"error\", this._onError.bind(this)).on(\"close\", function (reason) {\n        return _this3._onClose(\"transport close\", reason);\n      });\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      this.readyState = \"open\";\n      SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emitReserved(\"open\");\n      this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n  }, {\n    key: \"_onPacket\",\n    value: function _onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        this.emitReserved(\"packet\", packet);\n        // Socket is live - any packet counts\n        this.emitReserved(\"heartbeat\");\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n          case \"ping\":\n            this._sendPacket(\"pong\");\n            this.emitReserved(\"ping\");\n            this.emitReserved(\"pong\");\n            this._resetPingTimeout();\n            break;\n          case \"error\":\n            var err = new Error(\"server error\");\n            // @ts-ignore\n            err.code = packet.data;\n            this._onError(err);\n            break;\n          case \"message\":\n            this.emitReserved(\"data\", packet.data);\n            this.emitReserved(\"message\", packet.data);\n            break;\n        }\n      } else {}\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emitReserved(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this._pingInterval = data.pingInterval;\n      this._pingTimeout = data.pingTimeout;\n      this._maxPayload = data.maxPayload;\n      this.onOpen();\n      // In case open handler closes socket\n      if (\"closed\" === this.readyState) return;\n      this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n  }, {\n    key: \"_resetPingTimeout\",\n    value: function _resetPingTimeout() {\n      var _this4 = this;\n      this.clearTimeoutFn(this._pingTimeoutTimer);\n      var delay = this._pingInterval + this._pingTimeout;\n      this._pingTimeoutTime = Date.now() + delay;\n      this._pingTimeoutTimer = this.setTimeoutFn(function () {\n        _this4._onClose(\"ping timeout\");\n      }, delay);\n      if (this.opts.autoUnref) {\n        this._pingTimeoutTimer.unref();\n      }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n  }, {\n    key: \"_onDrain\",\n    value: function _onDrain() {\n      this.writeBuffer.splice(0, this._prevBufferLen);\n      // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n      this._prevBufferLen = 0;\n      if (0 === this.writeBuffer.length) {\n        this.emitReserved(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        var packets = this._getWritablePackets();\n        this.transport.send(packets);\n        // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n        this._prevBufferLen = packets.length;\n        this.emitReserved(\"flush\");\n      }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n  }, {\n    key: \"_getWritablePackets\",\n    value: function _getWritablePackets() {\n      var shouldCheckPayloadSize = this._maxPayload && this.transport.name === \"polling\" && this.writeBuffer.length > 1;\n      if (!shouldCheckPayloadSize) {\n        return this.writeBuffer;\n      }\n      var payloadSize = 1; // first packet type\n      for (var i = 0; i < this.writeBuffer.length; i++) {\n        var data = this.writeBuffer[i].data;\n        if (data) {\n          payloadSize += byteLength(data);\n        }\n        if (i > 0 && payloadSize > this._maxPayload) {\n          return this.writeBuffer.slice(0, i);\n        }\n        payloadSize += 2; // separator + packet type\n      }\n\n      return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */\n  }, {\n    key: \"_hasPingExpired\",\n    value: function _hasPingExpired() {\n      var _this5 = this;\n      if (!this._pingTimeoutTime) return true;\n      var hasExpired = Date.now() > this._pingTimeoutTime;\n      if (hasExpired) {\n        this._pingTimeoutTime = 0;\n        nextTick(function () {\n          _this5._onClose(\"ping timeout\");\n        }, this.setTimeoutFn);\n      }\n      return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this._sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n  }, {\n    key: \"_sendPacket\",\n    value: function _sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emitReserved(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this6 = this;\n      var close = function close() {\n        _this6._onClose(\"forced close\");\n        _this6.transport.close();\n      };\n      var cleanupAndClose = function cleanupAndClose() {\n        _this6.off(\"upgrade\", cleanupAndClose);\n        _this6.off(\"upgradeError\", cleanupAndClose);\n        close();\n      };\n      var waitForUpgrade = function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        _this6.once(\"upgrade\", cleanupAndClose);\n        _this6.once(\"upgradeError\", cleanupAndClose);\n      };\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (_this6.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n      return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n  }, {\n    key: \"_onError\",\n    value: function _onError(err) {\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === \"opening\") {\n        this.transports.shift();\n        return this._open();\n      }\n      this.emitReserved(\"error\", err);\n      this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n  }, {\n    key: \"_onClose\",\n    value: function _onClose(reason, description) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        // clear timers\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        // stop event from firing again for transport\n        this.transport.removeAllListeners(\"close\");\n        // ensure transport won't stay open\n        this.transport.close();\n        // ignore further transport communication\n        this.transport.removeAllListeners();\n        if (withEventListeners) {\n          if (this._beforeunloadEventListener) {\n            removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n          }\n          if (this._offlineEventListener) {\n            var i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n            if (i !== -1) {\n              OFFLINE_EVENT_LISTENERS.splice(i, 1);\n            }\n          }\n        }\n        // set ready state\n        this.readyState = \"closed\";\n        // clear session id\n        this.id = null;\n        // emit close event\n        this.emitReserved(\"close\", reason, description);\n        // clean buffers after, so users can still\n        // grab the buffers on `close` event\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n      }\n    }\n  }]);\n  return SocketWithoutUpgrade;\n}(Emitter);\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nexport var SocketWithUpgrade = /*#__PURE__*/function (_SocketWithoutUpgrade) {\n  _inherits(SocketWithUpgrade, _SocketWithoutUpgrade);\n  var _super2 = _createSuper(SocketWithUpgrade);\n  function SocketWithUpgrade() {\n    var _this7;\n    _classCallCheck(this, SocketWithUpgrade);\n    _this7 = _super2.apply(this, arguments);\n    _this7._upgrades = [];\n    return _this7;\n  }\n  _createClass(SocketWithUpgrade, [{\n    key: \"onOpen\",\n    value: function onOpen() {\n      _get(_getPrototypeOf(SocketWithUpgrade.prototype), \"onOpen\", this).call(this);\n      if (\"open\" === this.readyState && this.opts.upgrade) {\n        for (var i = 0; i < this._upgrades.length; i++) {\n          this._probe(this._upgrades[i]);\n        }\n      }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n  }, {\n    key: \"_probe\",\n    value: function _probe(name) {\n      var _this8 = this;\n      var transport = this.createTransport(name);\n      var failed = false;\n      SocketWithoutUpgrade.priorWebsocketSuccess = false;\n      var onTransportOpen = function onTransportOpen() {\n        if (failed) return;\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            _this8.upgrading = true;\n            _this8.emitReserved(\"upgrading\", transport);\n            if (!transport) return;\n            SocketWithoutUpgrade.priorWebsocketSuccess = \"websocket\" === transport.name;\n            _this8.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === _this8.readyState) return;\n              cleanup();\n              _this8.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              _this8.emitReserved(\"upgrade\", transport);\n              transport = null;\n              _this8.upgrading = false;\n              _this8.flush();\n            });\n          } else {\n            var err = new Error(\"probe error\");\n            // @ts-ignore\n            err.transport = transport.name;\n            _this8.emitReserved(\"upgradeError\", err);\n          }\n        });\n      };\n      function freezeTransport() {\n        if (failed) return;\n        // Any callback called by transport should be ignored since now\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      }\n      // Handle any error that happens while probing\n      var onerror = function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        // @ts-ignore\n        error.transport = transport.name;\n        freezeTransport();\n        _this8.emitReserved(\"upgradeError\", error);\n      };\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      }\n      // When the socket is closed while we're probing\n      function onclose() {\n        onerror(\"socket closed\");\n      }\n      // When the socket is upgraded while we're probing\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          freezeTransport();\n        }\n      }\n      // Remove all listeners on the transport and on self\n      var cleanup = function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        _this8.off(\"close\", onclose);\n        _this8.off(\"upgrading\", onupgrade);\n      };\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      if (this._upgrades.indexOf(\"webtransport\") !== -1 && name !== \"webtransport\") {\n        // favor WebTransport\n        this.setTimeoutFn(function () {\n          if (!failed) {\n            transport.open();\n          }\n        }, 200);\n      } else {\n        transport.open();\n      }\n    }\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this._upgrades = this._filterUpgrades(data.upgrades);\n      _get(_getPrototypeOf(SocketWithUpgrade.prototype), \"onHandshake\", this).call(this, data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n  }, {\n    key: \"_filterUpgrades\",\n    value: function _filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      for (var i = 0; i < upgrades.length; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n      return filteredUpgrades;\n    }\n  }]);\n  return SocketWithUpgrade;\n}(SocketWithoutUpgrade);\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nexport var Socket = /*#__PURE__*/function (_SocketWithUpgrade) {\n  _inherits(Socket, _SocketWithUpgrade);\n  var _super3 = _createSuper(Socket);\n  function Socket(uri) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Socket);\n    var o = typeof uri === \"object\" ? uri : opts;\n    if (!o.transports || o.transports && typeof o.transports[0] === \"string\") {\n      o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"]).map(function (transportName) {\n        return DEFAULT_TRANSPORTS[transportName];\n      }).filter(function (t) {\n        return !!t;\n      });\n    }\n    return _super3.call(this, uri, o);\n  }\n  return _createClass(Socket);\n}(SocketWithUpgrade);","map":{"version":3,"names":["transports","DEFAULT_TRANSPORTS","installTimerFunctions","byteLength","decode","parse","Emitter","protocol","createCookieJar","defaultBinaryType","nextTick","withEventListeners","addEventListener","removeEventListener","OFFLINE_EVENT_LISTENERS","forEach","listener","SocketWithoutUpgrade","uri","opts","binaryType","writeBuffer","_prevBufferLen","_pingInterval","_pingTimeout","_maxPayload","_pingTimeoutTime","Infinity","parsedUri","hostname","host","secure","port","query","location","_transportsByName","t","transportName","prototype","name","push","Object","assign","path","agent","withCredentials","upgrade","timestampParam","rememberUpgrade","addTrailingSlash","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","replace","_beforeunloadEventListener","transport","removeAllListeners","close","_offlineEventListener","_onClose","description","_cookieJar","_open","EIO","id","sid","socket","length","setTimeoutFn","emitReserved","priorWebsocketSuccess","indexOf","readyState","createTransport","open","setTransport","on","_onDrain","bind","_onPacket","_onError","reason","flush","packet","type","onHandshake","JSON","data","_sendPacket","_resetPingTimeout","err","Error","code","pingInterval","pingTimeout","maxPayload","onOpen","clearTimeoutFn","_pingTimeoutTimer","delay","Date","now","autoUnref","unref","splice","writable","upgrading","packets","_getWritablePackets","send","shouldCheckPayloadSize","payloadSize","i","slice","hasExpired","msg","options","fn","undefined","compress","once","cleanupAndClose","off","waitForUpgrade","tryAllTransports","shift","SocketWithUpgrade","arguments","_upgrades","_probe","failed","onTransportOpen","pause","cleanup","freezeTransport","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","_filterUpgrades","upgrades","filteredUpgrades","Socket","o","map","filter"],"sources":["C:/Users/diarrhea/Downloads/exchangePro-main/client/node_modules/engine.io-client/build/esm/socket.js"],"sourcesContent":["import { transports as DEFAULT_TRANSPORTS } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nimport { createCookieJar, defaultBinaryType, nextTick, } from \"./globals.node.js\";\nconst withEventListeners = typeof addEventListener === \"function\" &&\n    typeof removeEventListener === \"function\";\nconst OFFLINE_EVENT_LISTENERS = [];\nif (withEventListeners) {\n    // within a ServiceWorker, any event handler for the 'offline' event must be added on the initial evaluation of the\n    // script, so we create one single event listener here which will forward the event to the socket instances\n    addEventListener(\"offline\", () => {\n        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());\n    }, false);\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes without upgrade mechanism, which means that it will keep the first low-level transport that\n * successfully establishes the connection.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithoutUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithUpgrade\n * @see Socket\n */\nexport class SocketWithoutUpgrade extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri - uri or options\n     * @param {Object} opts - options\n     */\n    constructor(uri, opts) {\n        super();\n        this.binaryType = defaultBinaryType;\n        this.writeBuffer = [];\n        this._prevBufferLen = 0;\n        this._pingInterval = -1;\n        this._pingTimeout = -1;\n        this._maxPayload = -1;\n        /**\n         * The expiration timestamp of the {@link _pingTimeoutTimer} object is tracked, in case the timer is throttled and the\n         * callback is not fired on time. This can happen for example when a laptop is suspended or when a phone is locked.\n         */\n        this._pingTimeoutTime = Infinity;\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            const parsedUri = parse(uri);\n            opts.hostname = parsedUri.host;\n            opts.secure =\n                parsedUri.protocol === \"https\" || parsedUri.protocol === \"wss\";\n            opts.port = parsedUri.port;\n            if (parsedUri.query)\n                opts.query = parsedUri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = [];\n        this._transportsByName = {};\n        opts.transports.forEach((t) => {\n            const transportName = t.prototype.name;\n            this.transports.push(transportName);\n            this._transportsByName[transportName] = t;\n        });\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            addTrailingSlash: true,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024,\n            },\n            transportOptions: {},\n            closeOnBeforeunload: false,\n        }, opts);\n        this.opts.path =\n            this.opts.path.replace(/\\/$/, \"\") +\n                (this.opts.addTrailingSlash ? \"/\" : \"\");\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        if (withEventListeners) {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                this._beforeunloadEventListener = () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                };\n                addEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this._offlineEventListener = () => {\n                    this._onClose(\"transport close\", {\n                        description: \"network connection lost\",\n                    });\n                };\n                OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);\n            }\n        }\n        if (this.opts.withCredentials) {\n            this._cookieJar = createCookieJar();\n        }\n        this._open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} name - transport name\n     * @return {Transport}\n     * @private\n     */\n    createTransport(name) {\n        const query = Object.assign({}, this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port,\n        }, this.opts.transportOptions[name]);\n        return new this._transportsByName[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @private\n     */\n    _open() {\n        if (this.transports.length === 0) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        const transportName = this.opts.rememberUpgrade &&\n            SocketWithoutUpgrade.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1\n            ? \"websocket\"\n            : this.transports[0];\n        this.readyState = \"opening\";\n        const transport = this.createTransport(transportName);\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this._onDrain.bind(this))\n            .on(\"packet\", this._onPacket.bind(this))\n            .on(\"error\", this._onError.bind(this))\n            .on(\"close\", (reason) => this._onClose(\"transport close\", reason));\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        SocketWithoutUpgrade.priorWebsocketSuccess =\n            \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n    }\n    /**\n     * Handles a packet.\n     *\n     * @private\n     */\n    _onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this._sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    this._resetPingTimeout();\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this._onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this._pingInterval = data.pingInterval;\n        this._pingTimeout = data.pingTimeout;\n        this._maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this._resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @private\n     */\n    _resetPingTimeout() {\n        this.clearTimeoutFn(this._pingTimeoutTimer);\n        const delay = this._pingInterval + this._pingTimeout;\n        this._pingTimeoutTime = Date.now() + delay;\n        this._pingTimeoutTimer = this.setTimeoutFn(() => {\n            this._onClose(\"ping timeout\");\n        }, delay);\n        if (this.opts.autoUnref) {\n            this._pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @private\n     */\n    _onDrain() {\n        this.writeBuffer.splice(0, this._prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this._prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this._getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this._prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    _getWritablePackets() {\n        const shouldCheckPayloadSize = this._maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this._maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Checks whether the heartbeat timer has expired but the socket has not yet been notified.\n     *\n     * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the\n     * `write()` method then the message would not be buffered by the Socket.IO client.\n     *\n     * @return {boolean}\n     * @private\n     */\n    /* private */ _hasPingExpired() {\n        if (!this._pingTimeoutTime)\n            return true;\n        const hasExpired = Date.now() > this._pingTimeoutTime;\n        if (hasExpired) {\n            this._pingTimeoutTime = 0;\n            nextTick(() => {\n                this._onClose(\"ping timeout\");\n            }, this.setTimeoutFn);\n        }\n        return hasExpired;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    write(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a message. Alias of {@link Socket#write}.\n     *\n     * @param {String} msg - message.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @return {Socket} for chaining.\n     */\n    send(msg, options, fn) {\n        this._sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} type: packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} fn - callback function.\n     * @private\n     */\n    _sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options,\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     */\n    close() {\n        const close = () => {\n            this._onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @private\n     */\n    _onError(err) {\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        if (this.opts.tryAllTransports &&\n            this.transports.length > 1 &&\n            this.readyState === \"opening\") {\n            this.transports.shift();\n            return this._open();\n        }\n        this.emitReserved(\"error\", err);\n        this._onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @private\n     */\n    _onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this._pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (withEventListeners) {\n                if (this._beforeunloadEventListener) {\n                    removeEventListener(\"beforeunload\", this._beforeunloadEventListener, false);\n                }\n                if (this._offlineEventListener) {\n                    const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);\n                    if (i !== -1) {\n                        OFFLINE_EVENT_LISTENERS.splice(i, 1);\n                    }\n                }\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this._prevBufferLen = 0;\n        }\n    }\n}\nSocketWithoutUpgrade.protocol = protocol;\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * In order to allow tree-shaking, there are no transports included, that's why the `transports` option is mandatory.\n *\n * @example\n * import { SocketWithUpgrade, WebSocket } from \"engine.io-client\";\n *\n * const socket = new SocketWithUpgrade({\n *   transports: [WebSocket]\n * });\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see Socket\n */\nexport class SocketWithUpgrade extends SocketWithoutUpgrade {\n    constructor() {\n        super(...arguments);\n        this._upgrades = [];\n    }\n    onOpen() {\n        super.onOpen();\n        if (\"open\" === this.readyState && this.opts.upgrade) {\n            for (let i = 0; i < this._upgrades.length; i++) {\n                this._probe(this._upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} name - transport name\n     * @private\n     */\n    _probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        SocketWithoutUpgrade.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", (msg) => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    SocketWithoutUpgrade.priorWebsocketSuccess =\n                        \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = (err) => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        if (this._upgrades.indexOf(\"webtransport\") !== -1 &&\n            name !== \"webtransport\") {\n            // favor WebTransport\n            this.setTimeoutFn(() => {\n                if (!failed) {\n                    transport.open();\n                }\n            }, 200);\n        }\n        else {\n            transport.open();\n        }\n    }\n    onHandshake(data) {\n        this._upgrades = this._filterUpgrades(data.upgrades);\n        super.onHandshake(data);\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} upgrades - server upgrades\n     * @private\n     */\n    _filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        for (let i = 0; i < upgrades.length; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\n/**\n * This class provides a WebSocket-like interface to connect to an Engine.IO server. The connection will be established\n * with one of the available low-level transports, like HTTP long-polling, WebSocket or WebTransport.\n *\n * This class comes with an upgrade mechanism, which means that once the connection is established with the first\n * low-level transport, it will try to upgrade to a better transport.\n *\n * @example\n * import { Socket } from \"engine.io-client\";\n *\n * const socket = new Socket();\n *\n * socket.on(\"open\", () => {\n *   socket.send(\"hello\");\n * });\n *\n * @see SocketWithoutUpgrade\n * @see SocketWithUpgrade\n */\nexport class Socket extends SocketWithUpgrade {\n    constructor(uri, opts = {}) {\n        const o = typeof uri === \"object\" ? uri : opts;\n        if (!o.transports ||\n            (o.transports && typeof o.transports[0] === \"string\")) {\n            o.transports = (o.transports || [\"polling\", \"websocket\", \"webtransport\"])\n                .map((transportName) => DEFAULT_TRANSPORTS[transportName])\n                .filter((t) => !!t);\n        }\n        super(uri, o);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}