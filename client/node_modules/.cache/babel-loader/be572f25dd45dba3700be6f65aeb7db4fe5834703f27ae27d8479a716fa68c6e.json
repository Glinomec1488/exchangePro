{"ast":null,"code":"import _createForOfIteratorHelper from \"E:/Users/1/Downloads/fakeex/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"E:/Users/1/Downloads/fakeex/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"E:/Users/1/Downloads/fakeex/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"E:/Users/1/Downloads/fakeex/client/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"E:/Users/1/Downloads/fakeex/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"E:/Users/1/Downloads/fakeex/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"E:/Users/1/Downloads/fakeex/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n  var _super = _createSuper(Socket);\n  /**\n   * `Socket` constructor.\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    /**\n     * Whether the socket is currently connected to the server.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.connected); // true\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.connected); // false\n     * });\n     */\n    _this.connected = false;\n    /**\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n     * be transmitted by the server.\n     */\n    _this.recovered = false;\n    /**\n     * Buffer for packets received before the CONNECT packet\n     */\n    _this.receiveBuffer = [];\n    /**\n     * Buffer for packets that will be sent once the socket is connected\n     */\n    _this.sendBuffer = [];\n    /**\n     * The queue of packets to be sent with retry in case of failure.\n     *\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n     * @private\n     */\n    _this._queue = [];\n    /**\n     * A sequence to generate the ID of the {@link QueuedPacket}.\n     * @private\n     */\n    _this._queueSeq = 0;\n    _this.ids = 0;\n    /**\n     * A map containing acknowledgement handlers.\n     *\n     * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n     *\n     * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n     * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n     * - `const value = await socket.emitWithAck(\"test\")`\n     *\n     * From those that don't:\n     *\n     * - `socket.emit(\"test\", (value) => { ... });`\n     *\n     * In the first case, the handlers will be called with an error when:\n     *\n     * - the timeout is reached\n     * - the socket gets disconnected\n     *\n     * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n     * an acknowledgement from the server.\n     *\n     * @private\n     */\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n    _this._opts = Object.assign({}, opts);\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Whether the socket is currently disconnected\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(socket.disconnected); // false\n   * });\n   *\n   * socket.on(\"disconnect\", () => {\n   *   console.log(socket.disconnected); // true\n   * });\n   */\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      var _a, _b, _c;\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      args.unshift(ev);\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n        this._addToQueue(args);\n        return this;\n      }\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        var ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      var isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n      var isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n      var discardPacket = this.flags.volatile && !isTransportWritable;\n      if (discardPacket) {} else if (isConnected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n      var _a;\n      var timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n      var fn = function fn() {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        ack.apply(_this2, args);\n      };\n      fn.withError = true;\n      this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n  }, {\n    key: \"emitWithAck\",\n    value: function emitWithAck(ev) {\n      var _this3 = this;\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n      return new Promise(function (resolve, reject) {\n        var fn = function fn(arg1, arg2) {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        };\n        fn.withError = true;\n        args.push(fn);\n        _this3.emit.apply(_this3, [ev].concat(args));\n      });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n  }, {\n    key: \"_addToQueue\",\n    value: function _addToQueue(args) {\n      var _this4 = this;\n      var ack;\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n      var packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args: args,\n        flags: Object.assign({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push(function (err) {\n        if (packet !== _this4._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n        var hasError = err !== null;\n        if (hasError) {\n          if (packet.tryCount > _this4._opts.retries) {\n            _this4._queue.shift();\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          _this4._queue.shift();\n          if (ack) {\n            for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n              responseArgs[_key5 - 1] = arguments[_key5];\n            }\n            ack.apply(void 0, [null].concat(responseArgs));\n          }\n        }\n        packet.pending = false;\n        return _this4._drainQueue();\n      });\n      this._queue.push(packet);\n      this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n  }, {\n    key: \"_drainQueue\",\n    value: function _drainQueue() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n      var packet = this._queue[0];\n      if (packet.pending && !force) {\n        return;\n      }\n      packet.pending = true;\n      packet.tryCount++;\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this5 = this;\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this5._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n  }, {\n    key: \"_sendConnectPacket\",\n    value: function _sendConnectPacket(data) {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this._pid ? Object.assign({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n      this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n  }, {\n    key: \"_clearAcks\",\n    value: function _clearAcks() {\n      var _this6 = this;\n      Object.keys(this.acks).forEach(function (id) {\n        var isBuffered = _this6.sendBuffer.some(function (packet) {\n          return String(packet.id) === id;\n        });\n        if (!isBuffered) {\n          // note: handlers that do not accept an error as first argument are ignored here\n          var ack = _this6.acks[id];\n          delete _this6.acks[id];\n          if (ack.withError) {\n            ack.call(_this6, new Error(\"socket has been disconnected\"));\n          }\n        }\n      });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n        var _iterator = _createForOfIteratorHelper(listeners),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n      if (typeof ack !== \"function\") {\n        return;\n      }\n      delete this.acks[packet.id];\n      // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n      if (ack.withError) {\n        packet.data.unshift(null);\n      }\n      // @ts-ignore\n      ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id, pid) {\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n      this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this7 = this;\n      this.receiveBuffer.forEach(function (args) {\n        return _this7.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this7.notifyOutgoingListeners(packet);\n        _this7.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n  return Socket;\n}(Emitter);","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","io","nsp","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","subs","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","_a","_b","_c","hasOwnProperty","Error","toString","retries","fromQueue","volatile","_addToQueue","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","isConnected","_hasPingExpired","discardPacket","notifyOutgoingListeners","push","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","fn","clearTimeoutFn","withError","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","hasError","shift","responseArgs","_drainQueue","force","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","_clearAcks","keys","forEach","isBuffered","some","String","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","subDestroy","_anyOutgoingListeners"],"sources":["E:/Users/1/Downloads/fakeex/client/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        var _a, _b, _c;\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n        const discardPacket = this.flags.volatile && !isTransportWritable;\n        if (discardPacket) {\n        }\n        else if (isConnected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}