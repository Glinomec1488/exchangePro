{"ast":null,"code":"import _classCallCheck from \"C:/Users/diarrhea/Documents/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/diarrhea/Documents/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/diarrhea/Documents/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/diarrhea/Documents/exchangePro-main/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport var Polling = /*#__PURE__*/function (_Transport) {\n  _inherits(Polling, _Transport);\n  var _super = _createSuper(Polling);\n  function Polling() {\n    var _this;\n    _classCallCheck(this, Polling);\n    _this = _super.apply(this, arguments);\n    _this._polling = false;\n    return _this;\n  }\n  _createClass(Polling, [{\n    key: \"name\",\n    get: function get() {\n      return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n  }, {\n    key: \"doOpen\",\n    value: function doOpen() {\n      this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n  }, {\n    key: \"pause\",\n    value: function pause(onPause) {\n      var _this2 = this;\n      this.readyState = \"pausing\";\n      var pause = function pause() {\n        _this2.readyState = \"paused\";\n        onPause();\n      };\n      if (this._polling || !this.writable) {\n        var total = 0;\n        if (this._polling) {\n          total++;\n          this.once(\"pollComplete\", function () {\n            --total || pause();\n          });\n        }\n        if (!this.writable) {\n          total++;\n          this.once(\"drain\", function () {\n            --total || pause();\n          });\n        }\n      } else {\n        pause();\n      }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n  }, {\n    key: \"_poll\",\n    value: function _poll() {\n      this._polling = true;\n      this.doPoll();\n      this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n  }, {\n    key: \"onData\",\n    value: function onData(data) {\n      var _this3 = this;\n      var callback = function callback(packet) {\n        // if its the first message we consider the transport open\n        if (\"opening\" === _this3.readyState && packet.type === \"open\") {\n          _this3.onOpen();\n        }\n        // if its a close packet, we close the ongoing requests\n        if (\"close\" === packet.type) {\n          _this3.onClose({\n            description: \"transport closed by the server\"\n          });\n          return false;\n        }\n        // otherwise bypass onData and handle the message\n        _this3.onPacket(packet);\n      };\n      // decode payload\n      decodePayload(data, this.socket.binaryType).forEach(callback);\n      // if an event did not trigger closing\n      if (\"closed\" !== this.readyState) {\n        // if we got data we're not polling\n        this._polling = false;\n        this.emitReserved(\"pollComplete\");\n        if (\"open\" === this.readyState) {\n          this._poll();\n        } else {}\n      }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      var _this4 = this;\n      var close = function close() {\n        _this4.write([{\n          type: \"close\"\n        }]);\n      };\n      if (\"open\" === this.readyState) {\n        close();\n      } else {\n        // in case we're trying to close while\n        // handshaking is in progress (GH-164)\n        this.once(\"open\", close);\n      }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this5 = this;\n      this.writable = false;\n      encodePayload(packets, function (data) {\n        _this5.doWrite(data, function () {\n          _this5.writable = true;\n          _this5.emitReserved(\"drain\");\n        });\n      });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var schema = this.opts.secure ? \"https\" : \"http\";\n      var query = this.query || {};\n      // cache busting is forced\n      if (false !== this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = randomString();\n      }\n      if (!this.supportsBinary && !query.sid) {\n        query.b64 = 1;\n      }\n      return this.createUri(schema, query);\n    }\n  }]);\n  return Polling;\n}(Transport);","map":{"version":3,"names":["Transport","randomString","encodePayload","decodePayload","Polling","arguments","_polling","_poll","onPause","readyState","pause","writable","total","once","doPoll","emitReserved","data","callback","packet","type","onOpen","onClose","description","onPacket","socket","binaryType","forEach","close","write","packets","doWrite","schema","opts","secure","query","timestampRequests","timestampParam","supportsBinary","sid","b64","createUri"],"sources":["C:/Users/diarrhea/Documents/exchangePro-main/client/node_modules/engine.io-client/build/esm/transports/polling.js"],"sourcesContent":["import { Transport } from \"../transport.js\";\nimport { randomString } from \"../util.js\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n    constructor() {\n        super(...arguments);\n        this._polling = false;\n    }\n    get name() {\n        return \"polling\";\n    }\n    /**\n     * Opens the socket (triggers polling). We write a PING message to determine\n     * when the transport is open.\n     *\n     * @protected\n     */\n    doOpen() {\n        this._poll();\n    }\n    /**\n     * Pauses polling.\n     *\n     * @param {Function} onPause - callback upon buffers are flushed and transport is paused\n     * @package\n     */\n    pause(onPause) {\n        this.readyState = \"pausing\";\n        const pause = () => {\n            this.readyState = \"paused\";\n            onPause();\n        };\n        if (this._polling || !this.writable) {\n            let total = 0;\n            if (this._polling) {\n                total++;\n                this.once(\"pollComplete\", function () {\n                    --total || pause();\n                });\n            }\n            if (!this.writable) {\n                total++;\n                this.once(\"drain\", function () {\n                    --total || pause();\n                });\n            }\n        }\n        else {\n            pause();\n        }\n    }\n    /**\n     * Starts polling cycle.\n     *\n     * @private\n     */\n    _poll() {\n        this._polling = true;\n        this.doPoll();\n        this.emitReserved(\"poll\");\n    }\n    /**\n     * Overloads onData to detect payloads.\n     *\n     * @protected\n     */\n    onData(data) {\n        const callback = (packet) => {\n            // if its the first message we consider the transport open\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\n                this.onOpen();\n            }\n            // if its a close packet, we close the ongoing requests\n            if (\"close\" === packet.type) {\n                this.onClose({ description: \"transport closed by the server\" });\n                return false;\n            }\n            // otherwise bypass onData and handle the message\n            this.onPacket(packet);\n        };\n        // decode payload\n        decodePayload(data, this.socket.binaryType).forEach(callback);\n        // if an event did not trigger closing\n        if (\"closed\" !== this.readyState) {\n            // if we got data we're not polling\n            this._polling = false;\n            this.emitReserved(\"pollComplete\");\n            if (\"open\" === this.readyState) {\n                this._poll();\n            }\n            else {\n            }\n        }\n    }\n    /**\n     * For polling, send a close packet.\n     *\n     * @protected\n     */\n    doClose() {\n        const close = () => {\n            this.write([{ type: \"close\" }]);\n        };\n        if (\"open\" === this.readyState) {\n            close();\n        }\n        else {\n            // in case we're trying to close while\n            // handshaking is in progress (GH-164)\n            this.once(\"open\", close);\n        }\n    }\n    /**\n     * Writes a packets payload.\n     *\n     * @param {Array} packets - data packets\n     * @protected\n     */\n    write(packets) {\n        this.writable = false;\n        encodePayload(packets, (data) => {\n            this.doWrite(data, () => {\n                this.writable = true;\n                this.emitReserved(\"drain\");\n            });\n        });\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @private\n     */\n    uri() {\n        const schema = this.opts.secure ? \"https\" : \"http\";\n        const query = this.query || {};\n        // cache busting is forced\n        if (false !== this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = randomString();\n        }\n        if (!this.supportsBinary && !query.sid) {\n            query.b64 = 1;\n        }\n        return this.createUri(schema, query);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}