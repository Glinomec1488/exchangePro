{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1\\\\Videos\\\\exchangePro-main\\\\client\\\\src\\\\screens\\\\home\\\\components\\\\exchange\\\\components\\\\form\\\\components\\\\captcha\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../../../../../../../store/hooks\";\nimport { dispatchCaptchaResult, generateCaptcha } from \"../../../../../../../../store/slices/exchange\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Captcha = () => {\n  _s();\n  const [result, setResult] = useState('');\n  const {\n    num1,\n    num2,\n    isValid\n  } = useAppSelector(state => state.exchange.captcha);\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (!num1 && !num2) {\n      dispatch(generateCaptcha());\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exchange__block-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exchange__block-text\",\n      children: \"ENTER CAPTCHA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"exchange__block-captcha\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"exchange__block-input exchange__block-input-captcha exchange__block-input-captcha-first-num\",\n        readOnly: true,\n        type: \"number\",\n        value: num1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange__block-sign\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"exchange__block-input exchange__block-input-captcha exchange__block-input-captcha-second-num\",\n        readOnly: true,\n        type: \"number\",\n        value: num2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"exchange__block-sign\",\n        children: \"=\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: isValid ? \"exchange__block-input exchange__block-input-captcha exchange__block-input-captcha-sum\" : \"exchange__block-input exchange__block-input-captcha exchange__block-input-captcha-sum exchange_wrong_captcha\",\n        type: \"number\",\n        value: result,\n        onChange: e => {\n          setResult(e.target.value);\n          dispatch(dispatchCaptchaResult(e.target.value));\n        },\n        name: \"captchaResult\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(Captcha, \"9E6gB3XLl3qUoY0LUt+xhJrgN4E=\", false, function () {\n  return [useAppSelector, useAppDispatch];\n});\n_c = Captcha;\nexport default Captcha;\nvar _c;\n$RefreshReg$(_c, \"Captcha\");","map":{"version":3,"names":["useEffect","useState","useAppDispatch","useAppSelector","dispatchCaptchaResult","generateCaptcha","jsxDEV","_jsxDEV","Captcha","_s","result","setResult","num1","num2","isValid","state","exchange","captcha","dispatch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","readOnly","type","value","onChange","e","target","name","required","_c","$RefreshReg$"],"sources":["C:/Users/1/Videos/exchangePro-main/client/src/screens/home/components/exchange/components/form/components/captcha/index.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useAppDispatch, useAppSelector } from \"../../../../../../../../store/hooks\"\nimport { dispatchCaptchaResult, generateCaptcha } from \"../../../../../../../../store/slices/exchange\"\n\nconst Captcha = () => {\n    const [result, setResult] = useState('')\n\n    const {\n        num1,\n        num2,\n        isValid,\n    } = useAppSelector(state => state.exchange.captcha)\n\n    const dispatch = useAppDispatch()\n\n    useEffect(() => {\n        if (!num1 && !num2) {\n            dispatch(generateCaptcha())\n        }\n    }, [])\n\n    return (\n        <div className=\"exchange__block-wrapper\">\n            <div className=\"exchange__block-text\">\n                ENTER CAPTCHA\n            </div>\n            <div className=\"exchange__block-captcha\">\n                <input\n                    className=\"exchange__block-input exchange__block-input-captcha exchange__block-input-captcha-first-num\"\n                    readOnly type=\"number\" value={num1} />\n                <div className=\"exchange__block-sign\">+</div>\n                <input\n                    className=\"exchange__block-input exchange__block-input-captcha exchange__block-input-captcha-second-num\"\n                    readOnly type=\"number\" value={num2} />\n                <div className=\"exchange__block-sign\">=</div>\n                <input\n                    className={\n                        isValid\n                            ? \"exchange__block-input exchange__block-input-captcha exchange__block-input-captcha-sum\"\n                            : \"exchange__block-input exchange__block-input-captcha exchange__block-input-captcha-sum exchange_wrong_captcha\"\n                    }\n                    type=\"number\" value={result} onChange={(e) => {\n                        setResult(e.target.value)\n                        dispatch(dispatchCaptchaResult(e.target.value))\n                    }} name=\"captchaResult\" required />\n            </div>\n        </div>\n    )\n}\n\nexport default Captcha"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,cAAc,QAAQ,qCAAqC;AACpF,SAASC,qBAAqB,EAAEC,eAAe,QAAQ,+CAA+C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtG,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAM;IACFW,IAAI;IACJC,IAAI;IACJC;EACJ,CAAC,GAAGX,cAAc,CAACY,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAACC,OAAO,CAAC;EAEnD,MAAMC,QAAQ,GAAGhB,cAAc,CAAC,CAAC;EAEjCF,SAAS,CAAC,MAAM;IACZ,IAAI,CAACY,IAAI,IAAI,CAACC,IAAI,EAAE;MAChBK,QAAQ,CAACb,eAAe,CAAC,CAAC,CAAC;IAC/B;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIE,OAAA;IAAKY,SAAS,EAAC,yBAAyB;IAAAC,QAAA,gBACpCb,OAAA;MAAKY,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAAC;IAEtC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNjB,OAAA;MAAKY,SAAS,EAAC,yBAAyB;MAAAC,QAAA,gBACpCb,OAAA;QACIY,SAAS,EAAC,6FAA6F;QACvGM,QAAQ;QAACC,IAAI,EAAC,QAAQ;QAACC,KAAK,EAAEf;MAAK;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1CjB,OAAA;QAAKY,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7CjB,OAAA;QACIY,SAAS,EAAC,8FAA8F;QACxGM,QAAQ;QAACC,IAAI,EAAC,QAAQ;QAACC,KAAK,EAAEd;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC1CjB,OAAA;QAAKY,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC7CjB,OAAA;QACIY,SAAS,EACLL,OAAO,GACD,uFAAuF,GACvF,8GACT;QACDY,IAAI,EAAC,QAAQ;QAACC,KAAK,EAAEjB,MAAO;QAACkB,QAAQ,EAAGC,CAAC,IAAK;UAC1ClB,SAAS,CAACkB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;UACzBT,QAAQ,CAACd,qBAAqB,CAACyB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC,CAAC;QACnD,CAAE;QAACI,IAAI,EAAC,eAAe;QAACC,QAAQ;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAAf,EAAA,CA5CKD,OAAO;EAAA,QAOLL,cAAc,EAEDD,cAAc;AAAA;AAAA+B,EAAA,GAT7BzB,OAAO;AA8Cb,eAAeA,OAAO;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}