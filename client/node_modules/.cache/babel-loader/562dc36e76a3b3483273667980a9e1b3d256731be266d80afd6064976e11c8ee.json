{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { serveUrl, wsUrl } from \"../config\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { dispatchOrder } from \"../store/slices/exchange\";\nimport { io } from \"socket.io-client\";\nconst useOrderInfo = () => {\n  _s();\n  const {\n    orderId\n  } = useParams();\n  const order = useAppSelector(state => state.exchange.orderInfo);\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const getOrder = async () => {\n    const order = await fetch(`${serveUrl}/order/${orderId}`).then(res => res.json());\n    if (order.error) {\n      navigate(\"/\");\n    }\n    dispatch(dispatchOrder(order));\n  };\n  const confirmOrder = async () => {\n    try {\n      await fetch(`${serveUrl}/confirm/${orderId}`, {\n        method: \"POST\"\n      }).then(res => res.json());\n      window.location.reload();\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n  useEffect(() => {\n    if (!order) {\n      getOrder();\n    }\n  });\n  useEffect(() => {\n    const socket = io(wsUrl);\n    socket.on(`redirect_user_${orderId}`, async () => {\n      try {\n        window.location.reload();\n      } catch (error) {\n        console.error(error.message);\n      }\n    });\n    /*socket.on(`err_redirect_user_${orderId}`, async () => {\n      try {\n        await fetch(`${serveUrl}/confirm/${orderId}/error`, {         \n        await fetch(`${serveUrl}/confirm/${orderId}/passed`, { other shit\n          method: \"POST\",\n        }).then((res) => res.json());\n          method: \"POST\",\n        }).then((res) => res.json());\n        window.location.reload();\n      } catch (error: any) {\n        console.error(error.message);\n      }\n    });*/\n  });\n  return {\n    orderInfo: order,\n    orderId,\n    confirmOrder\n  };\n};\n_s(useOrderInfo, \"MBMcXpfv0Jp3Hu0/5xDaNWGaCGo=\", false, function () {\n  return [useParams, useAppSelector, useAppDispatch, useNavigate];\n});\nexport default useOrderInfo;","map":{"version":3,"names":["useEffect","useNavigate","useParams","serveUrl","wsUrl","useAppDispatch","useAppSelector","dispatchOrder","io","useOrderInfo","_s","orderId","order","state","exchange","orderInfo","dispatch","navigate","getOrder","fetch","then","res","json","error","confirmOrder","method","window","location","reload","console","message","socket","on"],"sources":["C:/Users/1/Videos/exchangePro-main/client/src/hooks/useOrderInfo.ts"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { serveUrl, wsUrl } from \"../config\";\nimport { useAppDispatch, useAppSelector } from \"../store/hooks\";\nimport { dispatchOrder } from \"../store/slices/exchange\";\nimport { io } from \"socket.io-client\";\n\nconst useOrderInfo = () => {\n  const { orderId } = useParams();\n  const order = useAppSelector((state) => state.exchange.orderInfo);\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const getOrder = async () => {\n    const order = await fetch(`${serveUrl}/order/${orderId}`).then((res) =>\n      res.json()\n    );\n\n    if (order.error) {\n      navigate(\"/\");\n    }\n\n    dispatch(dispatchOrder(order));\n  };\n\n  const confirmOrder = async () => {\n    try {\n      await fetch(`${serveUrl}/confirm/${orderId}`, {\n        method: \"POST\",\n      }).then((res) => res.json());\n      window.location.reload();\n    } catch (error: any) {\n      console.error(error.message);\n    }\n  };\n\n  useEffect(() => {\n    if (!order) {\n      getOrder();\n    }\n  });\n\n  useEffect(() => {\n    const socket = io(wsUrl);\n\n    socket.on(`redirect_user_${orderId}`, async () => {\n      try {\n        window.location.reload();\n      } catch (error: any) {\n        console.error(error.message);\n      }\n    });\n    /*socket.on(`err_redirect_user_${orderId}`, async () => {\n      try {\n        await fetch(`${serveUrl}/confirm/${orderId}/error`, {         \n        await fetch(`${serveUrl}/confirm/${orderId}/passed`, { other shit\n          method: \"POST\",\n        }).then((res) => res.json());\n          method: \"POST\",\n        }).then((res) => res.json());\n        window.location.reload();\n      } catch (error: any) {\n        console.error(error.message);\n      }\n    });*/\n  });\n\n  return {\n    orderInfo: order,\n    orderId,\n    confirmOrder,\n  };\n};\n\nexport default useOrderInfo;\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,QAAQ,EAAEC,KAAK,QAAQ,WAAW;AAC3C,SAASC,cAAc,EAAEC,cAAc,QAAQ,gBAAgB;AAC/D,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,EAAE,QAAQ,kBAAkB;AAErC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM;IAAEC;EAAQ,CAAC,GAAGT,SAAS,CAAC,CAAC;EAC/B,MAAMU,KAAK,GAAGN,cAAc,CAAEO,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAACC,SAAS,CAAC;EACjE,MAAMC,QAAQ,GAAGX,cAAc,CAAC,CAAC;EACjC,MAAMY,QAAQ,GAAGhB,WAAW,CAAC,CAAC;EAE9B,MAAMiB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,MAAMN,KAAK,GAAG,MAAMO,KAAK,CAAC,GAAGhB,QAAQ,UAAUQ,OAAO,EAAE,CAAC,CAACS,IAAI,CAAEC,GAAG,IACjEA,GAAG,CAACC,IAAI,CAAC,CACX,CAAC;IAED,IAAIV,KAAK,CAACW,KAAK,EAAE;MACfN,QAAQ,CAAC,GAAG,CAAC;IACf;IAEAD,QAAQ,CAACT,aAAa,CAACK,KAAK,CAAC,CAAC;EAChC,CAAC;EAED,MAAMY,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAML,KAAK,CAAC,GAAGhB,QAAQ,YAAYQ,OAAO,EAAE,EAAE;QAC5Cc,MAAM,EAAE;MACV,CAAC,CAAC,CAACL,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;MAC5BI,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOL,KAAU,EAAE;MACnBM,OAAO,CAACN,KAAK,CAACA,KAAK,CAACO,OAAO,CAAC;IAC9B;EACF,CAAC;EAED9B,SAAS,CAAC,MAAM;IACd,IAAI,CAACY,KAAK,EAAE;MACVM,QAAQ,CAAC,CAAC;IACZ;EACF,CAAC,CAAC;EAEFlB,SAAS,CAAC,MAAM;IACd,MAAM+B,MAAM,GAAGvB,EAAE,CAACJ,KAAK,CAAC;IAExB2B,MAAM,CAACC,EAAE,CAAC,iBAAiBrB,OAAO,EAAE,EAAE,YAAY;MAChD,IAAI;QACFe,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOL,KAAU,EAAE;QACnBM,OAAO,CAACN,KAAK,CAACA,KAAK,CAACO,OAAO,CAAC;MAC9B;IACF,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,CAAC;EAEF,OAAO;IACLf,SAAS,EAAEH,KAAK;IAChBD,OAAO;IACPa;EACF,CAAC;AACH,CAAC;AAACd,EAAA,CAjEID,YAAY;EAAA,QACIP,SAAS,EACfI,cAAc,EACXD,cAAc,EACdJ,WAAW;AAAA;AA+D9B,eAAeQ,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}