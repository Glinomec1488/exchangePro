{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { serveUrl } from \"../../../../../../../config\";\nimport { useAppSelector } from \"../../../../../../../store/hooks\";\nimport { setIsLoaded } from \"..\";\nconst getFixedAmount = amount => {\n  if (amount.toFixed(6) === \"0,000000\" || amount.toFixed(6) === \"0.000000\") return \"0\";\n  return amount.toFixed(7);\n};\n/*const ranges: Record<string, { min: number; max: number }> = {\n  BTC: { min: 0.0001, max: 10 },\n  ETH: { min: 0.02, max: 100 },\n  BNB: { min: 0.08, max: 100 },\n  BCH: { min: 0.15, max: 100 },\n  ZEC: { min: 1, max: 1488 },\n  FTM: { min: 74, max: 1009 },\n  SOL: { min: 0.3, max: 1001 },\n  LTC: { min: 0.77, max: 1021 },\n  TRX: { min: 293, max: 100053 },\n  ZRX: { min: 157, max: 100063 },\n  XRP: { min: 92, max: 10000 },\n  USDT: { min: 44, max: 106051 },\n  ADA: { min: 141, max: 100000 },\n  XTZ: { min: 72, max: 100067 },\n  XMR: { min: 0.3, max: 1055 },\n  DASH: { min: 2.1, max: 10083 },\n  DOGE: { min: 449, max: 1220000 },\n  DOT: { min: 11, max: 100554 },\n};\n*/\nconst filterShortName = input => {\n  return input.replace(/\\(.*?\\)/g, \"\").trim();\n};\nconst useExchangeRate = () => {\n  _s();\n  const {\n    fromCurrency,\n    toCurrency\n  } = useAppSelector(state => state.exchange);\n  const [fromCurrencyAmount, setFromCurrencyAmount] = useState(\"1\");\n  const [toCurrencyAmount, setToCurrencyAmount] = useState(\"\");\n  const [isChangeInput, setIsChangeInput] = useState(true);\n  const [isChangeToCurrency, setIsChangeToCurrency] = useState(false);\n  const [isChangeFromCurrency, setIsChangeFromCurrency] = useState(false);\n  const noNetShrtTo = filterShortName(fromCurrency.shortName);\n  const noNetShrtFrom = filterShortName(toCurrency.shortName);\n  const [minAmount, setMinAmount] = useState(1);\n  const [maxAmount, setMaxAmount] = useState(1);\n  const getExchangeRate = async (toCurrencyAmount, fromCurrencyAmount, isChangeReceiveAmount) => {\n    if (!isChangeInput || !toCurrency.shortName || !fromCurrency.shortName) return;\n    const isChange = isChangeReceiveAmount ? \"True\" : \"false\";\n    setIsLoaded(false);\n    try {\n      const newForm = await fetch(`${serveUrl}/calculator/${noNetShrtTo}/${noNetShrtFrom}/${fromCurrencyAmount || \"0.01\"}/${toCurrencyAmount || \"0.01\"}/${isChange}`, {\n        method: \"POST\"\n      }).then(res => res.json());\n\n      /*if (isChangeReceiveAmount) {\n        setFromCurrencyAmount(getFixedAmount(newForm.amount));\n      } else {*/\n      setToCurrencyAmount(getFixedAmount(newForm.amount));\n      //}\n      setIsChangeInput(false);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      // Optionally handle any errors if needed\n    }\n    setIsLoaded(true);\n  };\n\n  /*const getFromCurrencyRange = (currency: string) => {\n    return ranges[currency] || { min: \"0\", max: \"0\" }; // Default range if currency is not found\n  };*/\n\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n  }, [fromCurrencyAmount, isChangeFromCurrency]);\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n  }, [toCurrencyAmount, isChangeToCurrency]);\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeFromCurrency(prev => !prev);\n  }, [fromCurrency]);\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeToCurrency(prev => !prev);\n  }, [toCurrency]);\n\n  /*useEffect(() => {\n    if (noNetShrtTo) {\n      const range = getFromCurrencyRange(noNetShrtTo);\n      setMinAmount(range.min);\n      setMaxAmount(range.max);\n    }\n  }, [fromCurrency]);\n  */\n  /*  const config = {\n    fromCurrenycRange: {\n      from: minAmount,\n      to: maxAmount,\n    },\n    toCurrenycRange: {\n      from: 0,\n      to: 0,\n    },\n  };\n  */\n  const changeFromAmount = amount => {\n    if (Number(amount) <= config.fromCurrenycRange.to && Number(amount) >= config.fromCurrenycRange.from) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.fromCurrenycRange.from}`);\n    }\n  };\n  const changeToAmount = amount => {\n    if (Number(amount) <= config.toCurrenycRange.to && Number(amount) >= config.toCurrenycRange.from) {\n      setToCurrencyAmount(amount);\n    } else {\n      setToCurrencyAmount(`${config.toCurrenycRange.from}`);\n    }\n  };\n  return {\n    exchangeRate: config,\n    fromCurrencyAmount,\n    toCurrencyAmount,\n    setFromCurrencyAmount: changeFromAmount,\n    setToCurrencyAmount: changeToAmount,\n    setIsChangeInput\n  };\n};\n_s(useExchangeRate, \"h07NkiySduwIJkJi1wwfm5rf1Ko=\", false, function () {\n  return [useAppSelector];\n});\nexport default useExchangeRate;","map":{"version":3,"names":["useEffect","useState","serveUrl","useAppSelector","setIsLoaded","getFixedAmount","amount","toFixed","filterShortName","input","replace","trim","useExchangeRate","_s","fromCurrency","toCurrency","state","exchange","fromCurrencyAmount","setFromCurrencyAmount","toCurrencyAmount","setToCurrencyAmount","isChangeInput","setIsChangeInput","isChangeToCurrency","setIsChangeToCurrency","isChangeFromCurrency","setIsChangeFromCurrency","noNetShrtTo","shortName","noNetShrtFrom","minAmount","setMinAmount","maxAmount","setMaxAmount","getExchangeRate","isChangeReceiveAmount","isChange","newForm","fetch","method","then","res","json","error","console","prev","changeFromAmount","Number","config","fromCurrenycRange","to","from","changeToAmount","toCurrenycRange","exchangeRate"],"sources":["C:/Users/1/Videos/exchangePro-main/client/src/screens/home/components/exchange/components/form/hooks/useExchangeRate.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { serveUrl } from \"../../../../../../../config\";\nimport { useAppSelector } from \"../../../../../../../store/hooks\";\nimport { setIsLoaded } from \"..\";\n\nconst getFixedAmount = (amount: number) => {\n  if (amount.toFixed(6) === \"0,000000\" || amount.toFixed(6) === \"0.000000\")\n    return \"0\";\n  return amount.toFixed(7);\n};\n/*const ranges: Record<string, { min: number; max: number }> = {\n  BTC: { min: 0.0001, max: 10 },\n  ETH: { min: 0.02, max: 100 },\n  BNB: { min: 0.08, max: 100 },\n  BCH: { min: 0.15, max: 100 },\n  ZEC: { min: 1, max: 1488 },\n  FTM: { min: 74, max: 1009 },\n  SOL: { min: 0.3, max: 1001 },\n  LTC: { min: 0.77, max: 1021 },\n  TRX: { min: 293, max: 100053 },\n  ZRX: { min: 157, max: 100063 },\n  XRP: { min: 92, max: 10000 },\n  USDT: { min: 44, max: 106051 },\n  ADA: { min: 141, max: 100000 },\n  XTZ: { min: 72, max: 100067 },\n  XMR: { min: 0.3, max: 1055 },\n  DASH: { min: 2.1, max: 10083 },\n  DOGE: { min: 449, max: 1220000 },\n  DOT: { min: 11, max: 100554 },\n};\n*/\nconst filterShortName = (input: string) => {\n  return input.replace(/\\(.*?\\)/g, \"\").trim();\n};\n\nconst useExchangeRate = () => {\n  const { fromCurrency, toCurrency } = useAppSelector(\n    (state) => state.exchange\n  );\n\n  const [fromCurrencyAmount, setFromCurrencyAmount] = useState(\"1\");\n  const [toCurrencyAmount, setToCurrencyAmount] = useState(\"\");\n  const [isChangeInput, setIsChangeInput] = useState(true);\n  const [isChangeToCurrency, setIsChangeToCurrency] = useState(false);\n  const [isChangeFromCurrency, setIsChangeFromCurrency] = useState(false);\n  const noNetShrtTo = filterShortName(fromCurrency.shortName);\n  const noNetShrtFrom = filterShortName(toCurrency.shortName);\n  const [minAmount, setMinAmount] = useState(1);\n  const [maxAmount, setMaxAmount] = useState(1);\n\n  const getExchangeRate = async (\n    toCurrencyAmount: string,\n    fromCurrencyAmount: string,\n    isChangeReceiveAmount: boolean\n  ) => {\n    if (!isChangeInput || !toCurrency.shortName || !fromCurrency.shortName)\n      return;\n    const isChange = isChangeReceiveAmount ? \"True\" : \"false\";\n    setIsLoaded(false);\n    try {\n      const newForm = await fetch(\n        `${serveUrl}/calculator/${noNetShrtTo}/${noNetShrtFrom}/${\n          fromCurrencyAmount || \"0.01\"\n        }/${toCurrencyAmount || \"0.01\"}/${isChange}`,\n        {\n          method: \"POST\",\n        }\n      ).then((res) => res.json());\n\n      /*if (isChangeReceiveAmount) {\n        setFromCurrencyAmount(getFixedAmount(newForm.amount));\n      } else {*/\n      setToCurrencyAmount(getFixedAmount(newForm.amount));\n      //}\n      setIsChangeInput(false);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      // Optionally handle any errors if needed\n    }\n    setIsLoaded(true);\n  };\n\n  /*const getFromCurrencyRange = (currency: string) => {\n    return ranges[currency] || { min: \"0\", max: \"0\" }; // Default range if currency is not found\n  };*/\n\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n  }, [fromCurrencyAmount, isChangeFromCurrency]);\n\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n  }, [toCurrencyAmount, isChangeToCurrency]);\n\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeFromCurrency((prev) => !prev);\n  }, [fromCurrency]);\n\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeToCurrency((prev) => !prev);\n  }, [toCurrency]);\n\n  /*useEffect(() => {\n    if (noNetShrtTo) {\n      const range = getFromCurrencyRange(noNetShrtTo);\n      setMinAmount(range.min);\n      setMaxAmount(range.max);\n    }\n  }, [fromCurrency]);\n*/\n  /*  const config = {\n    fromCurrenycRange: {\n      from: minAmount,\n      to: maxAmount,\n    },\n    toCurrenycRange: {\n      from: 0,\n      to: 0,\n    },\n  };\n*/\n  const changeFromAmount = (amount: string) => {\n    if (\n      Number(amount) <= config.fromCurrenycRange.to &&\n      Number(amount) >= config.fromCurrenycRange.from\n    ) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.fromCurrenycRange.from}`);\n    }\n  };\n\n  const changeToAmount = (amount: string) => {\n    if (\n      Number(amount) <= config.toCurrenycRange.to &&\n      Number(amount) >= config.toCurrenycRange.from\n    ) {\n      setToCurrencyAmount(amount);\n    } else {\n      setToCurrencyAmount(`${config.toCurrenycRange.from}`);\n    }\n  };\n  return {\n    exchangeRate: config,\n    fromCurrencyAmount,\n    toCurrencyAmount,\n    setFromCurrencyAmount: changeFromAmount,\n    setToCurrencyAmount: changeToAmount,\n    setIsChangeInput,\n  };\n};\n\nexport default useExchangeRate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}