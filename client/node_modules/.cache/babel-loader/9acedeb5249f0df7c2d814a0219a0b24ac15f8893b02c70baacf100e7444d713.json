{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { serveUrl } from \"../../../../../../../config\";\nimport { useAppSelector } from \"../../../../../../../store/hooks\";\nconst config = {\n  fromCurrencyRange: {\n    from: 0.0004,\n    to: 22 // Initially set to 22 BTC; will dynamically update per selected currency\n  },\n\n  toCurrencyRange: {\n    from: 0.0004,\n    to: 22 // Initially set to 22 BTC; will dynamically update per selected currency\n  }\n};\n\nconst getFixedAmount = amount => {\n  if (amount.toFixed(7) === \"0,0000000\" || amount.toFixed(7) === \"0.0000000\") return \"0\";\n  return amount.toFixed(7);\n};\nconst useExchangeRate = () => {\n  _s();\n  const {\n    fromCurrency,\n    toCurrency\n  } = useAppSelector(state => state.exchange);\n  const [fromCurrencyAmount, setFromCurrencyAmount] = useState(\"0.01\");\n  const [toCurrencyAmount, setToCurrencyAmount] = useState(\"\");\n  const [isChangeInput, setIsChangeInput] = useState(true);\n  const [isChangeToCurrency, setIsChangeToCurrency] = useState(false);\n  const [isChangeFromCurrency, setIsChangeFromCurrency] = useState(false);\n  const [currencyRange, setCurrencyRange] = useState(config);\n  const filterShortName = input => {\n    return input.replace(/\\(.*?\\)/g, \"\").trim();\n  };\n  const noNetShrtTo = filterShortName(fromCurrency.shortName);\n  const noNetShrtFrom = filterShortName(toCurrency.shortName);\n  const getConvertedRange = async currencyShortName => {\n    try {\n      // Fetch current rates to calculate equivalent range\n      const response = await fetch(`${serveUrl}/rate/${currencyShortName}/BTC`);\n      const data = await response.json();\n      if (data.rate) {\n        const convertedMax = 22 * data.rate;\n        setCurrencyRange({\n          fromCurrencyRange: {\n            from: 0.0004,\n            to: convertedMax\n          },\n          toCurrencyRange: {\n            from: 0.0004,\n            to: convertedMax\n          }\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch currency conversion rate\", error);\n    }\n  };\n  const getExchangeRate = async (toCurrencyAmount, fromCurrencyAmount, isChangeReceiveAmount) => {\n    if (!isChangeInput || !toCurrency.shortName || !fromCurrency.shortName) return;\n    const isChange = isChangeReceiveAmount ? \"True\" : \"false\";\n    const newForm = await fetch(`${serveUrl}/calculator/${noNetShrtTo}/${noNetShrtFrom}/${fromCurrencyAmount || \"0.001\"}/${toCurrencyAmount || \"0.001\"}/${isChange}`, {\n      method: \"POST\"\n    }).then(res => res.json());\n    if (isChangeReceiveAmount) {\n      setFromCurrencyAmount(getFixedAmount(newForm.amount));\n    } else {\n      setToCurrencyAmount(getFixedAmount(newForm.amount));\n    }\n    setIsChangeInput(false);\n  };\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n  }, [fromCurrencyAmount, isChangeFromCurrency]);\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, true);\n  }, [toCurrencyAmount, isChangeToCurrency]);\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeFromCurrency(prev => !prev);\n  }, [fromCurrency]);\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeToCurrency(prev => !prev);\n  }, [toCurrency]);\n  const changeFromAmount = amount => {\n    if (Number(amount) <= config.fromCurrenycRange.to && Number(amount) >= config.fromCurrenycRange.from) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.fromCurrenycRange.from}`);\n    }\n  };\n  const changeToAmount = amount => {\n    if (Number(amount) <= config.toCurrenycRange.to && Number(amount) >= config.toCurrenycRange.from) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.toCurrenycRange.from}`);\n    }\n  };\n  return {\n    exchangeRate: config,\n    fromCurrencyAmount,\n    toCurrencyAmount,\n    setFromCurrencyAmount: changeFromAmount,\n    setToCurrencyAmount: changeToAmount,\n    setIsChangeInput\n  };\n};\n_s(useExchangeRate, \"T4zl82OM7D5JGuevLC/D5OhLysc=\", false, function () {\n  return [useAppSelector];\n});\nexport default useExchangeRate;","map":{"version":3,"names":["useEffect","useState","serveUrl","useAppSelector","config","fromCurrencyRange","from","to","toCurrencyRange","getFixedAmount","amount","toFixed","useExchangeRate","fromCurrency","toCurrency","state","exchange","fromCurrencyAmount","setFromCurrencyAmount","toCurrencyAmount","setToCurrencyAmount","isChangeInput","setIsChangeInput","isChangeToCurrency","setIsChangeToCurrency","isChangeFromCurrency","setIsChangeFromCurrency","currencyRange","setCurrencyRange","filterShortName","input","replace","trim","noNetShrtTo","shortName","noNetShrtFrom","getConvertedRange","currencyShortName","response","fetch","data","json","rate","convertedMax","error","console","getExchangeRate","isChangeReceiveAmount","isChange","newForm","method","then","res","prev","changeFromAmount","Number","fromCurrenycRange","changeToAmount","toCurrenycRange","exchangeRate"],"sources":["C:/Users/1/Downloads/naebalovo.com/client/src/screens/home/components/exchange/components/form/hooks/useExchangeRate.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { serveUrl } from \"../../../../../../../config\";\nimport { useAppSelector } from \"../../../../../../../store/hooks\";\n\nconst config = {\n  fromCurrencyRange: {\n    from: 0.0004,\n    to: 22, // Initially set to 22 BTC; will dynamically update per selected currency\n  },\n  toCurrencyRange: {\n    from: 0.0004,\n    to: 22, // Initially set to 22 BTC; will dynamically update per selected currency\n  },\n};\n\nconst getFixedAmount = (amount: number) => {\n  if (amount.toFixed(7) === \"0,0000000\" || amount.toFixed(7) === \"0.0000000\")\n    return \"0\";\n  return amount.toFixed(7);\n};\n\nconst useExchangeRate = () => {\n  const { fromCurrency, toCurrency } = useAppSelector(\n    (state) => state.exchange\n  );\n\n  const [fromCurrencyAmount, setFromCurrencyAmount] = useState(\"0.01\");\n  const [toCurrencyAmount, setToCurrencyAmount] = useState(\"\");\n  const [isChangeInput, setIsChangeInput] = useState(true);\n  const [isChangeToCurrency, setIsChangeToCurrency] = useState(false);\n  const [isChangeFromCurrency, setIsChangeFromCurrency] = useState(false);\n  const [currencyRange, setCurrencyRange] = useState(config);\n\n  const filterShortName = (input: string) => {\n    return input.replace(/\\(.*?\\)/g, \"\").trim();\n  };\n\n  const noNetShrtTo = filterShortName(fromCurrency.shortName);\n  const noNetShrtFrom = filterShortName(toCurrency.shortName);\n\n  const getConvertedRange = async (currencyShortName) => {\n    try {\n      // Fetch current rates to calculate equivalent range\n      const response = await fetch(`${serveUrl}/rate/${currencyShortName}/BTC`);\n      const data = await response.json();\n\n      if (data.rate) {\n        const convertedMax = 22 * data.rate;\n        setCurrencyRange({\n          fromCurrencyRange: { from: 0.0004, to: convertedMax },\n          toCurrencyRange: { from: 0.0004, to: convertedMax },\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch currency conversion rate\", error);\n    }\n  };\n\n  const getExchangeRate = async (\n    toCurrencyAmount: string,\n    fromCurrencyAmount: string,\n    isChangeReceiveAmount: boolean\n  ) => {\n    if (!isChangeInput || !toCurrency.shortName || !fromCurrency.shortName)\n      return;\n\n    const isChange = isChangeReceiveAmount ? \"True\" : \"false\";\n    const newForm = await fetch(\n      `${serveUrl}/calculator/${noNetShrtTo}/${noNetShrtFrom}/${\n        fromCurrencyAmount || \"0.001\"\n      }/${toCurrencyAmount || \"0.001\"}/${isChange}`,\n      {\n        method: \"POST\",\n      }\n    ).then((res) => res.json());\n\n    if (isChangeReceiveAmount) {\n      setFromCurrencyAmount(getFixedAmount(newForm.amount));\n    } else {\n      setToCurrencyAmount(getFixedAmount(newForm.amount));\n    }\n    setIsChangeInput(false);\n  };\n\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n  }, [fromCurrencyAmount, isChangeFromCurrency]);\n\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, true);\n  }, [toCurrencyAmount, isChangeToCurrency]);\n\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeFromCurrency((prev) => !prev);\n  }, [fromCurrency]);\n\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeToCurrency((prev) => !prev);\n  }, [toCurrency]);\n\n  const changeFromAmount = (amount: string) => {\n    if (\n      Number(amount) <= config.fromCurrenycRange.to &&\n      Number(amount) >= config.fromCurrenycRange.from\n    ) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.fromCurrenycRange.from}`);\n    }\n  };\n\n  const changeToAmount = (amount: string) => {\n    if (\n      Number(amount) <= config.toCurrenycRange.to &&\n      Number(amount) >= config.toCurrenycRange.from\n    ) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.toCurrenycRange.from}`);\n    }\n  };\n\n  return {\n    exchangeRate: config,\n    fromCurrencyAmount,\n    toCurrencyAmount,\n    setFromCurrencyAmount: changeFromAmount,\n    setToCurrencyAmount: changeToAmount,\n    setIsChangeInput,\n  };\n};\n\nexport default useExchangeRate;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,cAAc,QAAQ,kCAAkC;AAEjE,MAAMC,MAAM,GAAG;EACbC,iBAAiB,EAAE;IACjBC,IAAI,EAAE,MAAM;IACZC,EAAE,EAAE,EAAE,CAAE;EACV,CAAC;;EACDC,eAAe,EAAE;IACfF,IAAI,EAAE,MAAM;IACZC,EAAE,EAAE,EAAE,CAAE;EACV;AACF,CAAC;;AAED,MAAME,cAAc,GAAIC,MAAc,IAAK;EACzC,IAAIA,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,KAAK,WAAW,IAAID,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC,KAAK,WAAW,EACxE,OAAO,GAAG;EACZ,OAAOD,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM;IAAEC,YAAY;IAAEC;EAAW,CAAC,GAAGX,cAAc,CAChDY,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAC1B;EAED,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjB,QAAQ,CAAC,MAAM,CAAC;EACpE,MAAM,CAACkB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACsB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACwB,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAACG,MAAM,CAAC;EAE1D,MAAMyB,eAAe,GAAIC,KAAa,IAAK;IACzC,OAAOA,KAAK,CAACC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAACC,IAAI,EAAE;EAC7C,CAAC;EAED,MAAMC,WAAW,GAAGJ,eAAe,CAAChB,YAAY,CAACqB,SAAS,CAAC;EAC3D,MAAMC,aAAa,GAAGN,eAAe,CAACf,UAAU,CAACoB,SAAS,CAAC;EAE3D,MAAME,iBAAiB,GAAG,MAAOC,iBAAiB,IAAK;IACrD,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAErC,QAAS,SAAQmC,iBAAkB,MAAK,CAAC;MACzE,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAElC,IAAID,IAAI,CAACE,IAAI,EAAE;QACb,MAAMC,YAAY,GAAG,EAAE,GAAGH,IAAI,CAACE,IAAI;QACnCd,gBAAgB,CAAC;UACfvB,iBAAiB,EAAE;YAAEC,IAAI,EAAE,MAAM;YAAEC,EAAE,EAAEoC;UAAa,CAAC;UACrDnC,eAAe,EAAE;YAAEF,IAAI,EAAE,MAAM;YAAEC,EAAE,EAAEoC;UAAa;QACpD,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAClE;EACF,CAAC;EAED,MAAME,eAAe,GAAG,OACtB3B,gBAAwB,EACxBF,kBAA0B,EAC1B8B,qBAA8B,KAC3B;IACH,IAAI,CAAC1B,aAAa,IAAI,CAACP,UAAU,CAACoB,SAAS,IAAI,CAACrB,YAAY,CAACqB,SAAS,EACpE;IAEF,MAAMc,QAAQ,GAAGD,qBAAqB,GAAG,MAAM,GAAG,OAAO;IACzD,MAAME,OAAO,GAAG,MAAMV,KAAK,CACxB,GAAErC,QAAS,eAAc+B,WAAY,IAAGE,aAAc,IACrDlB,kBAAkB,IAAI,OACvB,IAAGE,gBAAgB,IAAI,OAAQ,IAAG6B,QAAS,EAAC,EAC7C;MACEE,MAAM,EAAE;IACV,CAAC,CACF,CAACC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACX,IAAI,EAAE,CAAC;IAE3B,IAAIM,qBAAqB,EAAE;MACzB7B,qBAAqB,CAACT,cAAc,CAACwC,OAAO,CAACvC,MAAM,CAAC,CAAC;IACvD,CAAC,MAAM;MACLU,mBAAmB,CAACX,cAAc,CAACwC,OAAO,CAACvC,MAAM,CAAC,CAAC;IACrD;IACAY,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACd8C,eAAe,CAAC3B,gBAAgB,EAAEF,kBAAkB,EAAE,KAAK,CAAC;EAC9D,CAAC,EAAE,CAACA,kBAAkB,EAAEQ,oBAAoB,CAAC,CAAC;EAE9CzB,SAAS,CAAC,MAAM;IACd8C,eAAe,CAAC3B,gBAAgB,EAAEF,kBAAkB,EAAE,IAAI,CAAC;EAC7D,CAAC,EAAE,CAACE,gBAAgB,EAAEI,kBAAkB,CAAC,CAAC;EAE1CvB,SAAS,CAAC,MAAM;IACdsB,gBAAgB,CAAC,IAAI,CAAC;IACtBI,uBAAuB,CAAE2B,IAAI,IAAK,CAACA,IAAI,CAAC;EAC1C,CAAC,EAAE,CAACxC,YAAY,CAAC,CAAC;EAElBb,SAAS,CAAC,MAAM;IACdsB,gBAAgB,CAAC,IAAI,CAAC;IACtBE,qBAAqB,CAAE6B,IAAI,IAAK,CAACA,IAAI,CAAC;EACxC,CAAC,EAAE,CAACvC,UAAU,CAAC,CAAC;EAEhB,MAAMwC,gBAAgB,GAAI5C,MAAc,IAAK;IAC3C,IACE6C,MAAM,CAAC7C,MAAM,CAAC,IAAIN,MAAM,CAACoD,iBAAiB,CAACjD,EAAE,IAC7CgD,MAAM,CAAC7C,MAAM,CAAC,IAAIN,MAAM,CAACoD,iBAAiB,CAAClD,IAAI,EAC/C;MACAY,qBAAqB,CAACR,MAAM,CAAC;IAC/B,CAAC,MAAM;MACLQ,qBAAqB,CAAE,GAAEd,MAAM,CAACoD,iBAAiB,CAAClD,IAAK,EAAC,CAAC;IAC3D;EACF,CAAC;EAED,MAAMmD,cAAc,GAAI/C,MAAc,IAAK;IACzC,IACE6C,MAAM,CAAC7C,MAAM,CAAC,IAAIN,MAAM,CAACsD,eAAe,CAACnD,EAAE,IAC3CgD,MAAM,CAAC7C,MAAM,CAAC,IAAIN,MAAM,CAACsD,eAAe,CAACpD,IAAI,EAC7C;MACAY,qBAAqB,CAACR,MAAM,CAAC;IAC/B,CAAC,MAAM;MACLQ,qBAAqB,CAAE,GAAEd,MAAM,CAACsD,eAAe,CAACpD,IAAK,EAAC,CAAC;IACzD;EACF,CAAC;EAED,OAAO;IACLqD,YAAY,EAAEvD,MAAM;IACpBa,kBAAkB;IAClBE,gBAAgB;IAChBD,qBAAqB,EAAEoC,gBAAgB;IACvClC,mBAAmB,EAAEqC,cAAc;IACnCnC;EACF,CAAC;AACH,CAAC;AAAC,GA/GIV,eAAe;EAAA,QACkBT,cAAc;AAAA;AAgHrD,eAAeS,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}