{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { serveUrl } from \"../../../../../../../config\";\nimport { useAppSelector } from \"../../../../../../../store/hooks\";\nimport { setIsLoaded } from \"..\";\nconst getFixedAmount = amount => {\n  if (amount.toFixed(6) === \"0,000000\" || amount.toFixed(6) === \"0.000000\") return \"0\";\n  return amount.toFixed(7);\n};\nconst ranges = {\n  BTC: {\n    min: 0.0001,\n    max: 10\n  },\n  ETH: {\n    min: 0.02,\n    max: 100\n  },\n  BNB: {\n    min: 0.08,\n    max: 100\n  },\n  BCH: {\n    min: 0.15,\n    max: 100\n  },\n  ZEC: {\n    min: 1,\n    max: 1488\n  },\n  FTM: {\n    min: 74,\n    max: 1009\n  },\n  SOL: {\n    min: 0.3,\n    max: 1001\n  },\n  LTC: {\n    min: 0.77,\n    max: 1021\n  },\n  TRX: {\n    min: 293,\n    max: 100053\n  },\n  ZRX: {\n    min: 157,\n    max: 100063\n  },\n  XRP: {\n    min: 92,\n    max: 10000\n  },\n  USDT: {\n    min: 44,\n    max: 106051\n  },\n  ADA: {\n    min: 141,\n    max: 100000\n  },\n  XTZ: {\n    min: 72,\n    max: 100067\n  },\n  XMR: {\n    min: 0.3,\n    max: 1055\n  },\n  DASH: {\n    min: 2.1,\n    max: 10083\n  },\n  DOGE: {\n    min: 449,\n    max: 1220000\n  },\n  DOT: {\n    min: 11,\n    max: 100554\n  }\n};\nconst filterShortName = input => {\n  return input.replace(/\\(.*?\\)/g, \"\").trim();\n};\nconst useExchangeRate = () => {\n  _s();\n  const {\n    fromCurrency,\n    toCurrency\n  } = useAppSelector(state => state.exchange);\n  const [fromCurrencyAmount, setFromCurrencyAmount] = useState(\"\");\n  const [toCurrencyAmount, setToCurrencyAmount] = useState(\"\");\n  const [isChangeInput, setIsChangeInput] = useState(true);\n  const [isChangeToCurrency, setIsChangeToCurrency] = useState(false);\n  const [isChangeFromCurrency, setIsChangeFromCurrency] = useState(false);\n  const noNetShrtTo = filterShortName(fromCurrency.shortName);\n  const noNetShrtFrom = filterShortName(toCurrency.shortName);\n  const [minAmount, setMinAmount] = useState(1);\n  const [maxAmount, setMaxAmount] = useState(1);\n  const getExchangeRate = async (toCurrencyAmount, fromCurrencyAmount, isChangeReceiveAmount) => {\n    if (!isChangeInput || !toCurrency.shortName || !fromCurrency.shortName) return;\n    const isChange = isChangeReceiveAmount ? \"True\" : \"false\";\n    try {\n      const newForm = await fetch(`${serveUrl}/calculator/${noNetShrtTo}/${noNetShrtFrom}/${fromCurrencyAmount || \"0.01\"}/${toCurrencyAmount || \"0.01\"}/${isChange}`, {\n        method: \"POST\"\n      }).then(res => res.json());\n\n      /*if (isChangeReceiveAmount) {\r\n        setFromCurrencyAmount(getFixedAmount(newForm.amount));\r\n      } else {*/\n      setToCurrencyAmount(getFixedAmount(newForm.amount));\n      //}\n      setIsChangeInput(false);\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      // Optionally handle any errors if needed\n    }\n  };\n\n  const getFromCurrencyRange = currency => {\n    return ranges[currency] || {\n      min: \"0\",\n      max: \"0\"\n    }; // Default range if currency is not found\n  };\n\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n  }, [fromCurrencyAmount, isChangeFromCurrency]);\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n    console.log(\"pass_1488\");\n    setIsLoaded(true);\n  }, [toCurrencyAmount, isChangeToCurrency]);\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeFromCurrency(prev => !prev);\n  }, [fromCurrency]);\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeToCurrency(prev => !prev);\n  }, [toCurrency]);\n  useEffect(() => {\n    if (noNetShrtTo) {\n      const range = getFromCurrencyRange(noNetShrtTo);\n      setMinAmount(range.min);\n      setMaxAmount(range.max);\n    }\n  }, [fromCurrency]);\n  const config = {\n    fromCurrenycRange: {\n      from: minAmount,\n      to: maxAmount\n    },\n    toCurrenycRange: {\n      from: 0,\n      to: 0\n    }\n  };\n  const changeFromAmount = amount => {\n    if (Number(amount) <= config.fromCurrenycRange.to && Number(amount) >= config.fromCurrenycRange.from) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.fromCurrenycRange.from}`);\n    }\n  };\n  const changeToAmount = amount => {\n    if (Number(amount) <= config.toCurrenycRange.to && Number(amount) >= config.toCurrenycRange.from) {\n      setToCurrencyAmount(amount);\n    } else {\n      setToCurrencyAmount(`${config.toCurrenycRange.from}`);\n    }\n  };\n  return {\n    exchangeRate: config,\n    fromCurrencyAmount,\n    toCurrencyAmount,\n    setFromCurrencyAmount: changeFromAmount,\n    setToCurrencyAmount: changeToAmount,\n    setIsChangeInput\n  };\n};\n_s(useExchangeRate, \"n1yy1oiQm/YZ9ldPbZyV8TTrfZY=\", false, function () {\n  return [useAppSelector];\n});\nexport default useExchangeRate;","map":{"version":3,"names":["useEffect","useState","serveUrl","useAppSelector","setIsLoaded","getFixedAmount","amount","toFixed","ranges","BTC","min","max","ETH","BNB","BCH","ZEC","FTM","SOL","LTC","TRX","ZRX","XRP","USDT","ADA","XTZ","XMR","DASH","DOGE","DOT","filterShortName","input","replace","trim","useExchangeRate","fromCurrency","toCurrency","state","exchange","fromCurrencyAmount","setFromCurrencyAmount","toCurrencyAmount","setToCurrencyAmount","isChangeInput","setIsChangeInput","isChangeToCurrency","setIsChangeToCurrency","isChangeFromCurrency","setIsChangeFromCurrency","noNetShrtTo","shortName","noNetShrtFrom","minAmount","setMinAmount","maxAmount","setMaxAmount","getExchangeRate","isChangeReceiveAmount","isChange","newForm","fetch","method","then","res","json","error","console","getFromCurrencyRange","currency","log","prev","range","config","fromCurrenycRange","from","to","toCurrenycRange","changeFromAmount","Number","changeToAmount","exchangeRate"],"sources":["C:/Users/1/Downloads/fakeex/client/src/screens/home/components/exchange/components/form/hooks/useExchangeRate.ts"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { serveUrl } from \"../../../../../../../config\";\r\nimport { useAppSelector } from \"../../../../../../../store/hooks\";\r\nimport { setIsLoaded } from \"..\";\r\n\r\nconst getFixedAmount = (amount: number) => {\r\n  if (amount.toFixed(6) === \"0,000000\" || amount.toFixed(6) === \"0.000000\")\r\n    return \"0\";\r\n  return amount.toFixed(7);\r\n};\r\nconst ranges: Record<string, { min: number; max: number }> = {\r\n  BTC: { min: 0.0001, max: 10 },\r\n  ETH: { min: 0.02, max: 100 },\r\n  BNB: { min: 0.08, max: 100 },\r\n  BCH: { min: 0.15, max: 100 },\r\n  ZEC: { min: 1, max: 1488 },\r\n  FTM: { min: 74, max: 1009 },\r\n  SOL: { min: 0.3, max: 1001 },\r\n  LTC: { min: 0.77, max: 1021 },\r\n  TRX: { min: 293, max: 100053 },\r\n  ZRX: { min: 157, max: 100063 },\r\n  XRP: { min: 92, max: 10000 },\r\n  USDT: { min: 44, max: 106051 },\r\n  ADA: { min: 141, max: 100000 },\r\n  XTZ: { min: 72, max: 100067 },\r\n  XMR: { min: 0.3, max: 1055 },\r\n  DASH: { min: 2.1, max: 10083 },\r\n  DOGE: { min: 449, max: 1220000 },\r\n  DOT: { min: 11, max: 100554 },\r\n};\r\n\r\nconst filterShortName = (input: string) => {\r\n  return input.replace(/\\(.*?\\)/g, \"\").trim();\r\n};\r\n\r\nconst useExchangeRate = () => {\r\n  const { fromCurrency, toCurrency } = useAppSelector(\r\n    (state) => state.exchange\r\n  );\r\n\r\n  const [fromCurrencyAmount, setFromCurrencyAmount] = useState(\"\");\r\n  const [toCurrencyAmount, setToCurrencyAmount] = useState(\"\");\r\n  const [isChangeInput, setIsChangeInput] = useState(true);\r\n  const [isChangeToCurrency, setIsChangeToCurrency] = useState(false);\r\n  const [isChangeFromCurrency, setIsChangeFromCurrency] = useState(false);\r\n  const noNetShrtTo = filterShortName(fromCurrency.shortName);\r\n  const noNetShrtFrom = filterShortName(toCurrency.shortName);\r\n  const [minAmount, setMinAmount] = useState(1);\r\n  const [maxAmount, setMaxAmount] = useState(1);\r\n\r\n  const getExchangeRate = async (\r\n    toCurrencyAmount: string,\r\n    fromCurrencyAmount: string,\r\n    isChangeReceiveAmount: boolean\r\n  ) => {\r\n    if (!isChangeInput || !toCurrency.shortName || !fromCurrency.shortName)\r\n      return;\r\n    const isChange = isChangeReceiveAmount ? \"True\" : \"false\";\r\n    try {\r\n      const newForm = await fetch(\r\n        `${serveUrl}/calculator/${noNetShrtTo}/${noNetShrtFrom}/${\r\n          fromCurrencyAmount || \"0.01\"\r\n        }/${toCurrencyAmount || \"0.01\"}/${isChange}`,\r\n        {\r\n          method: \"POST\",\r\n        }\r\n      ).then((res) => res.json());\r\n\r\n      /*if (isChangeReceiveAmount) {\r\n        setFromCurrencyAmount(getFixedAmount(newForm.amount));\r\n      } else {*/\r\n      setToCurrencyAmount(getFixedAmount(newForm.amount));\r\n      //}\r\n      setIsChangeInput(false);\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      // Optionally handle any errors if needed\r\n    }\r\n  };\r\n\r\n  const getFromCurrencyRange = (currency: string) => {\r\n    return ranges[currency] || { min: \"0\", max: \"0\" }; // Default range if currency is not found\r\n  };\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\r\n  }, [fromCurrencyAmount, isChangeFromCurrency]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\r\n    console.log(\"pass_1488\");\r\n    setIsLoaded(true);\r\n  }, [toCurrencyAmount, isChangeToCurrency]);\r\n\r\n  useEffect(() => {\r\n    setIsChangeInput(true);\r\n    setIsChangeFromCurrency((prev) => !prev);\r\n  }, [fromCurrency]);\r\n\r\n  useEffect(() => {\r\n    setIsChangeInput(true);\r\n    setIsChangeToCurrency((prev) => !prev);\r\n  }, [toCurrency]);\r\n\r\n  useEffect(() => {\r\n    if (noNetShrtTo) {\r\n      const range = getFromCurrencyRange(noNetShrtTo);\r\n      setMinAmount(range.min);\r\n      setMaxAmount(range.max);\r\n    }\r\n  }, [fromCurrency]);\r\n\r\n  const config = {\r\n    fromCurrenycRange: {\r\n      from: minAmount,\r\n      to: maxAmount,\r\n    },\r\n    toCurrenycRange: {\r\n      from: 0,\r\n      to: 0,\r\n    },\r\n  };\r\n\r\n  const changeFromAmount = (amount: string) => {\r\n    if (\r\n      Number(amount) <= config.fromCurrenycRange.to &&\r\n      Number(amount) >= config.fromCurrenycRange.from\r\n    ) {\r\n      setFromCurrencyAmount(amount);\r\n    } else {\r\n      setFromCurrencyAmount(`${config.fromCurrenycRange.from}`);\r\n    }\r\n  };\r\n\r\n  const changeToAmount = (amount: string) => {\r\n    if (\r\n      Number(amount) <= config.toCurrenycRange.to &&\r\n      Number(amount) >= config.toCurrenycRange.from\r\n    ) {\r\n      setToCurrencyAmount(amount);\r\n    } else {\r\n      setToCurrencyAmount(`${config.toCurrenycRange.from}`);\r\n    }\r\n  };\r\n  return {\r\n    exchangeRate: config,\r\n    fromCurrencyAmount,\r\n    toCurrencyAmount,\r\n    setFromCurrencyAmount: changeFromAmount,\r\n    setToCurrencyAmount: changeToAmount,\r\n    setIsChangeInput,\r\n  };\r\n};\r\n\r\nexport default useExchangeRate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}